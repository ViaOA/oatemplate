// Generated by OABuilder

package com.template.datasource;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.util.*;
import com.viaoa.object.OAAnnotationDelegate;
import com.viaoa.annotation.OATable;
import com.viaoa.datasource.jdbc.*;
import com.viaoa.datasource.jdbc.db.Database;
import com.viaoa.datasource.jdbc.db.Table;
import com.viaoa.datasource.jdbc.db.Column;
import com.viaoa.datasource.jdbc.db.Index;
import com.viaoa.datasource.jdbc.db.*;
import com.template.resource.Resource;
import com.template.model.oa.*;

public class DataSource {
    private static Logger LOG = Logger.getLogger(DataSource.class.getName());
    protected OADataSourceJDBC jdbcDataSource;
    protected Database database;
    protected DBMetaData dbmd;
    
    public DataSource() {
    }
    
    public void open() throws Exception {
        String driver = Resource.getValue(Resource.DB_JDBC_Driver);
        String jdbcUrl = Resource.getValue(Resource.DB_JDBC_URL);
        String user = Resource.getValue(Resource.DB_User);
        String pw = Resource.getValue(Resource.DB_Password);
        String pwBase64 = Resource.getValue(Resource.DB_Password_Base64);
        int dbmdType = Resource.getInt(Resource.DB_DBMD_Type);
        int minConnections = Resource.getInt(Resource.DB_MinConnections);
        int maxConnections = Resource.getInt(Resource.DB_MaxConnections);
    
        if (OAString.isEmpty(pw)) {
            String s = Base64.decode(pwBase64);
            if (!OAString.isEmpty(s)) pw = s;
        }
        open(driver, jdbcUrl, dbmdType, user, pw, minConnections, maxConnections);
    }
    
    protected void open(String driver, String jdbcUrl, int dbmdType, String user, String password, int min, int max) throws Exception {
        if (jdbcDataSource != null) return;
        String s = String.format("JDBC: driver=%s, url=%s, dbmdType=%d, user=%s", driver, jdbcUrl, dbmdType, user);
        LOG.fine(s);
        Database db = getDatabase();
    
        createDAO(db);
        dbmd = new DBMetaData(dbmdType, user, password, driver, jdbcUrl);
        dbmd.setMinConnections(min);
        dbmd.setMaxConnections(max);
        jdbcDataSource = new OADataSourceJDBC(db, dbmd);
    }
    
    public DBMetaData getDBMetaData() {
        return dbmd;
    }
    public void close() {
        getOADataSource().close();
        jdbcDataSource = null;;
    }
    
    
    public OADataSourceJDBC getOADataSource() {
        return jdbcDataSource;
    }

    public Database getDatabase() {
        if (database != null) return database;
        try {
            database = createDatabaseFromClasses();
        }
        catch (Exception e) {
            throw new RuntimeException("error creating database", e);
        }
        return database;
    }    
    
    private Database createDatabaseFromClasses() throws Exception {
        Database database = new Database();
    
        Table table = new Table("NextNumber",com.viaoa.datasource.autonumber.NextNumber.class); // ** Used by all OADataSource Database
        // NextNumber COLUMNS
        Column[] columns = new Column[2];
        columns[0] = new Column("nextNumberId","nextNumberId", Types.VARCHAR, 75);
        columns[0].primaryKey = true;
        columns[1] = new Column("nextNumber","nextNumber", Types.INTEGER);
        table.setColumns(columns);
        database.addTable(table);
        String packageName = AppServer.class.getPackage().getName();
        String[] fnames = OAReflect.getClasses(packageName);
    
        Class[] classes = null;
        for (String fn : fnames) {
            Class c = Class.forName(packageName + "." + fn);
            if (c.getAnnotation(OATable.class) == null) continue;
            classes = (Class[]) OAArray.add(Class.class, classes, c);
        }
        OAAnnotationDelegate.update(database, classes);
        return database;
    }
    private Database createDatabase() {
        int NextNumber = 0;
        // TABLES
        int APPSERVER = 1;
        int APPUSER = 2;
        int APPUSERERROR = 3;
        int APPUSERLOGIN = 4;
        int IMAGESTORE = 5;
        int REPORT = 6;
        int REPORTCLASS = 7;
        int REPORTDEF = 8;
        
        // LINK TABLES
        int APPUSERREPORT = 9;
        int APPUSERLOGINREPORT = 10;
        int APPUSERERRORREPORT = 11;
        int APPSERVERREPORT = 12;
        int MAX = 13;
        
        Database db = new Database();
        Table[] tables = new Table[MAX];
        Column[] columns;
        Link[] links;
        Column[] fkeys;
        
        // TABLES
        tables[NextNumber] = new Table("NextNumber",com.viaoa.datasource.autonumber.NextNumber.class); // ** Used by all OADataSource Database
        tables[APPSERVER] = new Table("AppServer", AppServer.class);
        tables[APPUSER] = new Table("AppUser", AppUser.class);
        tables[APPUSERERROR] = new Table("AppUserError", AppUserError.class);
        tables[APPUSERLOGIN] = new Table("AppUserLogin", AppUserLogin.class);
        tables[IMAGESTORE] = new Table("ImageStore", ImageStore.class);
        tables[REPORT] = new Table("Report", Report.class);
        tables[REPORTCLASS] = new Table("ReportClass", ReportClass.class);
        tables[REPORTDEF] = new Table("ReportDef", ReportDef.class);
        
        // LINK TABLES
        tables[APPUSERREPORT] = new Table("AppUserReport",true);
        tables[APPUSERLOGINREPORT] = new Table("AppUserLoginReport",true);
        tables[APPUSERERRORREPORT] = new Table("AppUserErrorReport",true);
        tables[APPSERVERREPORT] = new Table("AppServerReport",true);
        
        // TABLE COLUMNS
        // NextNumber COLUMNS
        columns = new Column[2];
        columns[0] = new Column("nextNumberId","nextNumberId", Types.VARCHAR, 75);
        columns[0].primaryKey = true;
        columns[1] = new Column("nextNumber","nextNumber", Types.INTEGER);
        tables[NextNumber].setColumns(columns);
        
        // AppServer COLUMNS
        columns = new Column[7];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Started", "started", Types.TIMESTAMP);
        columns[3] = new Column("DemoMode", "demoMode", Types.BOOLEAN);
        columns[4] = new Column("TestOnly", "testOnly", Types.BOOLEAN);
        columns[5] = new Column("Release", "release", Types.VARCHAR, 18);
        columns[6] = new Column("AppUserLoginId", true);
        tables[APPSERVER].setColumns(columns);
        tables[APPSERVER].addIndex(new Index("AppServerAppUserLogin", "AppUserLoginId", true));
        
        // AppUser COLUMNS
        columns = new Column[9];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("LoginId", "loginId", Types.VARCHAR, 35);
        columns[2] = new Column("Password", "password", Types.VARCHAR, 50);
        columns[3] = new Column("Admin", "admin", Types.BOOLEAN);
        columns[4] = new Column("EditProcessed", "editProcessed", Types.BOOLEAN);
        columns[5] = new Column("FirstName", "firstName", Types.VARCHAR, 35);
        columns[6] = new Column("LastName", "lastName", Types.VARCHAR, 55);
        columns[7] = new Column("InactiveDate", "inactiveDate", Types.DATE);
        columns[8] = new Column("Note", "note", Types.CLOB);
        tables[APPUSER].setColumns(columns);
        
        // AppUserError COLUMNS
        columns = new Column[7];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("DateTimeValue", "dateTime", Types.TIMESTAMP);
        columns[2] = new Column("Message", "message", Types.VARCHAR, 250);
        columns[3] = new Column("StackTrace", "stackTrace", Types.CLOB);
        columns[4] = new Column("Reviewed", "reviewed", Types.DATE);
        columns[5] = new Column("ReviewNote", "reviewNote", Types.VARCHAR, 254);
        columns[6] = new Column("AppUserLoginId", true);
        tables[APPUSERERROR].setColumns(columns);
        tables[APPUSERERROR].addIndex(new Index("AppUserErrorAppUserLogin", "AppUserLoginId", true));
        
        // AppUserLogin COLUMNS
        columns = new Column[11];
        columns[0] = new Column("Id", "id", Types.INTEGER, 5);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Location", "location", Types.VARCHAR, 50);
        columns[3] = new Column("ComputerName", "computerName", Types.VARCHAR, 50);
        columns[4] = new Column("Disconnected", "disconnected", Types.TIMESTAMP);
        columns[5] = new Column("ConnectionId", "connectionId", Types.INTEGER);
        columns[6] = new Column("HostName", "hostName", Types.VARCHAR, 50);
        columns[7] = new Column("IpAddress", "ipAddress", Types.VARCHAR, 20);
        columns[8] = new Column("TotalMemory", "totalMemory", Types.BIGINT);
        columns[9] = new Column("FreeMemory", "freeMemory", Types.BIGINT);
        columns[10] = new Column("AppUserId", true);
        tables[APPUSERLOGIN].setColumns(columns);
        tables[APPUSERLOGIN].addIndex(new Index("AppUserLoginAppUser", "AppUserId", true));
        
        // ImageStore COLUMNS
        columns = new Column[4];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Bytes", "bytes", Types.BLOB);
        columns[3] = new Column("OrigFileName", "origFileName", Types.VARCHAR, 250);
        tables[IMAGESTORE].setColumns(columns);
        
        // Report COLUMNS
        columns = new Column[5];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Generated", "generated", Types.TIMESTAMP);
        columns[3] = new Column("Html", "html", Types.CLOB);
        columns[4] = new Column("ReportDefId", true);
        tables[REPORT].setColumns(columns);
        tables[REPORT].addIndex(new Index("ReportReportDef", "ReportDefId", true));
        
        // ReportClass COLUMNS
        columns = new Column[4];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Name", "name", Types.VARCHAR, 55);
        columns[3] = new Column("ClassName", "className", Types.VARCHAR, 75);
        columns[3].columnLowerName = "ClassNameLower";
        tables[REPORTCLASS].setColumns(columns);
        tables[REPORTCLASS].addIndex(new Index("ReportClassClassName", "ClassNameLower"));
        
        // ReportDef COLUMNS
        columns = new Column[6];
        columns[0] = new Column("Id", "id", Types.INTEGER, 20);
        columns[0].primaryKey = true;
        columns[0].assignNextNumber = true;
        columns[1] = new Column("Created", "created", Types.TIMESTAMP);
        columns[2] = new Column("Name", "name", Types.VARCHAR, 55);
        columns[3] = new Column("Template", "template", Types.CLOB);
        columns[4] = new Column("Seq", "seq", Types.INTEGER);
        columns[5] = new Column("ReportClassId", true);
        tables[REPORTDEF].setColumns(columns);
        tables[REPORTDEF].addIndex(new Index("ReportDefReportClass", "ReportClassId", true));
        
        // Link Tables Columns
        
        // AppUserReport COLUMNS
        columns = new Column[2];
        columns[0] = new Column("AppUserId",null);
        columns[1] = new Column("ReportId",null);
        tables[APPUSERREPORT].setColumns(columns);
        tables[APPUSERREPORT].addIndex(new Index("ReportAppUser", new String[] {"AppUserId"}));
        tables[APPUSERREPORT].addIndex(new Index("AppUserReport", new String[] {"ReportId"}));
        
        // AppUserLoginReport COLUMNS
        columns = new Column[2];
        columns[0] = new Column("AppUserLoginId",null);
        columns[1] = new Column("ReportId",null);
        tables[APPUSERLOGINREPORT].setColumns(columns);
        tables[APPUSERLOGINREPORT].addIndex(new Index("ReportAppUserLogin", new String[] {"AppUserLoginId"}));
        tables[APPUSERLOGINREPORT].addIndex(new Index("AppUserLoginReport", new String[] {"ReportId"}));
        
        // AppUserErrorReport COLUMNS
        columns = new Column[2];
        columns[0] = new Column("AppUserErrorId",null);
        columns[1] = new Column("ReportId",null);
        tables[APPUSERERRORREPORT].setColumns(columns);
        tables[APPUSERERRORREPORT].addIndex(new Index("ReportAppUserError", new String[] {"AppUserErrorId"}));
        tables[APPUSERERRORREPORT].addIndex(new Index("AppUserErrorReport", new String[] {"ReportId"}));
        
        // AppServerReport COLUMNS
        columns = new Column[2];
        columns[0] = new Column("AppServerId",null);
        columns[1] = new Column("ReportId",null);
        tables[APPSERVERREPORT].setColumns(columns);
        tables[APPSERVERREPORT].addIndex(new Index("ReportAppServer", new String[] {"AppServerId"}));
        tables[APPSERVERREPORT].addIndex(new Index("AppServerReport", new String[] {"ReportId"}));
        
        // LINKS
        // table.addLink( propertyName, toTableName, reversePropertyName, FKey ColumnNumber(s))
        tables[APPSERVER].addLink("appUserLogin", tables[APPUSERLOGIN], "appServers", new int[] {6});
        tables[APPUSER].addLink("appUserLogins", tables[APPUSERLOGIN], "appUser", new int[] {0});
        tables[APPUSERERROR].addLink("appUserLogin", tables[APPUSERLOGIN], "appUserErrors", new int[] {6});
        tables[APPUSERLOGIN].addLink("appServers", tables[APPSERVER], "appUserLogin", new int[] {0});
        tables[APPUSERLOGIN].addLink("appUser", tables[APPUSER], "appUserLogins", new int[] {10});
        tables[APPUSERLOGIN].addLink("appUserErrors", tables[APPUSERERROR], "appUserLogin", new int[] {0});
        tables[REPORT].addLink("reportDef", tables[REPORTDEF], "reports", new int[] {4});
        tables[REPORTCLASS].addLink("reportDefs", tables[REPORTDEF], "reportClass", new int[] {0});
        tables[REPORTDEF].addLink("reportClass", tables[REPORTCLASS], "reportDefs", new int[] {5});
        tables[REPORTDEF].addLink("reports", tables[REPORT], "reportDef", new int[] {0});
        
        // Links for Link Tables
        
        // AppUserReport LINKS
        tables[APPUSERREPORT].addLink("appUser", tables[APPUSER], "reports", new int[] {0});
        tables[APPUSER].addLink("reports", tables[APPUSERREPORT], "appUser", new int[] {0});
        tables[APPUSERREPORT].addLink("reports", tables[REPORT], "appUser", new int[] {1});
        tables[REPORT].addLink("appUser", tables[APPUSERREPORT], "reports", new int[] {0});
        
        // AppUserLoginReport LINKS
        tables[APPUSERLOGINREPORT].addLink("appUserLogin", tables[APPUSERLOGIN], "reports", new int[] {0});
        tables[APPUSERLOGIN].addLink("reports", tables[APPUSERLOGINREPORT], "appUserLogin", new int[] {0});
        tables[APPUSERLOGINREPORT].addLink("reports", tables[REPORT], "appUserLogin", new int[] {1});
        tables[REPORT].addLink("appUserLogin", tables[APPUSERLOGINREPORT], "reports", new int[] {0});
        
        // AppUserErrorReport LINKS
        tables[APPUSERERRORREPORT].addLink("appUserError", tables[APPUSERERROR], "reports", new int[] {0});
        tables[APPUSERERROR].addLink("reports", tables[APPUSERERRORREPORT], "appUserError", new int[] {0});
        tables[APPUSERERRORREPORT].addLink("reports", tables[REPORT], "appUserError", new int[] {1});
        tables[REPORT].addLink("appUserError", tables[APPUSERERRORREPORT], "reports", new int[] {0});
        
        // AppServerReport LINKS
        tables[APPSERVERREPORT].addLink("appServer", tables[APPSERVER], "reports", new int[] {0});
        tables[APPSERVER].addLink("reports", tables[APPSERVERREPORT], "appServer", new int[] {0});
        tables[APPSERVERREPORT].addLink("reports", tables[REPORT], "appServer", new int[] {1});
        tables[REPORT].addLink("appServer", tables[APPSERVERREPORT], "reports", new int[] {0});
        db.setTables(tables);
        return db;
    }
    
    protected void createDAO(Database db) {
        DataAccessObject dao;
        Table table;
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppServer.Id";
            private static final String columns = "AppServer.Id, AppServer.Created, AppServer.Started, AppServer.DemoMode, AppServer.TestOnly, AppServer.Release, AppServer.AppUserLoginId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppServer(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("AppServer");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppUser.Id";
            private static final String columns = "AppUser.Id, AppUser.LoginId, AppUser.Password, AppUser.Admin, AppUser.EditProcessed, AppUser.FirstName, AppUser.LastName, AppUser.InactiveDate, AppUser.Note";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppUser(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("AppUser");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppUserError.Id";
            private static final String columns = "AppUserError.Id, AppUserError.DateTimeValue, AppUserError.Message, AppUserError.StackTrace, AppUserError.Reviewed, AppUserError.ReviewNote, AppUserError.AppUserLoginId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppUserError(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("AppUserError");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "AppUserLogin.Id";
            private static final String columns = "AppUserLogin.Id, AppUserLogin.Created, AppUserLogin.Location, AppUserLogin.ComputerName, AppUserLogin.Disconnected, AppUserLogin.ConnectionId, AppUserLogin.HostName, AppUserLogin.IpAddress, AppUserLogin.TotalMemory, AppUserLogin.FreeMemory, AppUserLogin.AppUserId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getAppUserLogin(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("AppUserLogin");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "ImageStore.Id";
            private static final String columns = "ImageStore.Id, ImageStore.Created, ImageStore.OrigFileName";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getImageStore(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("ImageStore");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "Report.Id";
            private static final String columns = "Report.Id, Report.Created, Report.Generated, Report.Html, Report.ReportDefId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getReport(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("Report");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "ReportClass.Id";
            private static final String columns = "ReportClass.Id, ReportClass.Created, ReportClass.Name, ReportClass.ClassName";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getReportClass(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("ReportClass");
        if (table != null) table.setDataAccessObject(dao);
        
        dao = new DataAccessObject() {
            private static final String pkeyColumns = "ReportDef.Id";
            private static final String columns = "ReportDef.Id, ReportDef.Created, ReportDef.Name, ReportDef.Template, ReportDef.Seq, ReportDef.ReportClassId";
            @Override
            public String getPkeySelectColumns() {
                return pkeyColumns;
            }
            @Override
            public String getSelectColumns() {
                return columns;
            }
            @Override
            public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
                return getReportDef(rsi.getResultSet(), rsi);
            }
        };
        table = db.getTable("ReportDef");
        if (table != null) table.setDataAccessObject(dao);
    }
    
    protected AppServer getAppServer(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppServer appServer = (AppServer) OAObjectCacheDelegate.getObject(AppServer.class, id);
        if (appServer == null) {
            appServer = new AppServer();
            appServer.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appServer;
    }
    
    protected AppUser getAppUser(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppUser appUser = (AppUser) OAObjectCacheDelegate.getObject(AppUser.class, id);
        if (appUser == null) {
            appUser = new AppUser();
            appUser.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appUser;
    }
    
    protected AppUserError getAppUserError(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppUserError appUserError = (AppUserError) OAObjectCacheDelegate.getObject(AppUserError.class, id);
        if (appUserError == null) {
            appUserError = new AppUserError();
            appUserError.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appUserError;
    }
    
    protected AppUserLogin getAppUserLogin(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        AppUserLogin appUserLogin = (AppUserLogin) OAObjectCacheDelegate.getObject(AppUserLogin.class, id);
        if (appUserLogin == null) {
            appUserLogin = new AppUserLogin();
            appUserLogin.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return appUserLogin;
    }
    
    protected ImageStore getImageStore(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        ImageStore imageStore = (ImageStore) OAObjectCacheDelegate.getObject(ImageStore.class, id);
        if (imageStore == null) {
            imageStore = new ImageStore();
            imageStore.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return imageStore;
    }
    
    protected Report getReport(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        Report report = (Report) OAObjectCacheDelegate.getObject(Report.class, id);
        if (report == null) {
            report = new Report();
            report.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return report;
    }
    
    protected ReportClass getReportClass(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        ReportClass reportClass = (ReportClass) OAObjectCacheDelegate.getObject(ReportClass.class, id);
        if (reportClass == null) {
            reportClass = new ReportClass();
            reportClass.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return reportClass;
    }
    
    protected ReportDef getReportDef(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
        int id = rs.getInt(1);
        ReportDef reportDef = (ReportDef) OAObjectCacheDelegate.getObject(ReportDef.class, id);
        if (reportDef == null) {
            reportDef = new ReportDef();
            reportDef.load(rs, id);
        }
        else {
            rsi.setFoundInCache(true);
        }
        return reportDef;
    }
}
