// Generated by OABuilder
package com.template.util;
import java.util.Stack;
import java.math.*;
import java.awt.Color;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.datasource.*;
import com.viaoa.util.*;
import com.template.model.oa.*;
import com.template.model.oa.filter.*;
import com.template.delegate.*;
 
public class DataGenerator {
    OASelect sel;
    Hub hub;
    final Stack<OALinkInfo> stack = new Stack<>();
    public boolean add(OAObject obj, String linkName) {
        if (stack.size() > 20) {
            return false;
        }
        OAObjectInfo oi = OAObjectInfoDelegate.getObjectInfo(obj);
        OALinkInfo li = oi.getLinkInfo(linkName); 
        if (li == null) throw new RuntimeException("link="+linkName+", does not exist for object="+obj);
        if (stack.contains(li)) return false;
        stack.push(li);
        return true;
    }
    public void done(OAObject obj, String linkName) {
        OAObjectInfo oi = OAObjectInfoDelegate.getObjectInfo(obj);
        OALinkInfo li = oi.getLinkInfo(linkName); 
        if (li == null) throw new RuntimeException("link="+linkName+", does not exist for object="+obj);
        if (stack.pop() != li) {
            throw new RuntimeException("link="+linkName+", for object="+obj+", is not on the top of the stack");
        }
    }
    
    public AppServer createAppServer() {
        AppServer appServer = new AppServer();
        return appServer;
    }
    
    public void prepopulate(AppServer obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppServer obj, int level) {
        int x;
        int tot;
        if (add(obj, AppServer.P_AppUserLogin)) {
            // appUserLogin
            AppUserLogin appUserLogin = null;
            if (Math.random() < .75) {
                appUserLogin = (AppUserLogin) OAObjectCacheDelegate.getRandom(AppUserLogin.class, 500);
                if (appUserLogin != null) obj.setAppUserLogin(appUserLogin);
            }
            if (appUserLogin == null) {
                appUserLogin = createAppUserLogin();
                prepopulate(appUserLogin);
                obj.setAppUserLogin(appUserLogin);
            }
            done(obj, AppServer.P_AppUserLogin);
        }
    }
    
    public AppUser createAppUser() {
        AppUser appUser = new AppUser();
        return appUser;
    }
    
    public void prepopulate(AppUser obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppUser obj, int level) {
        int x;
        int tot;
    }
    
    public AppUserError createAppUserError() {
        AppUserError appUserError = new AppUserError();
        return appUserError;
    }
    
    public void prepopulate(AppUserError obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppUserError obj, int level) {
        int x;
        int tot;
        if (add(obj, AppUserError.P_AppUserLogin)) {
            // appUserLogin
            //    owned
            done(obj, AppUserError.P_AppUserLogin);
        }
    }
    
    public AppUserLogin createAppUserLogin() {
        AppUserLogin appUserLogin = new AppUserLogin();
        return appUserLogin;
    }
    
    public void prepopulate(AppUserLogin obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(AppUserLogin obj, int level) {
        int x;
        int tot;
        if (add(obj, AppUserLogin.P_AppUser)) {
            // appUser
            //    owned
            done(obj, AppUserLogin.P_AppUser);
        }
    }
    
    public ImageStore createImageStore() {
        ImageStore imageStore = new ImageStore();
        return imageStore;
    }
    
    public void prepopulate(ImageStore obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(ImageStore obj, int level) {
        int x;
        int tot;
    }
    
    public Report createReport() {
        Report report = new Report();
        return report;
    }
    
    public void prepopulate(Report obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(Report obj, int level) {
        int x;
        int tot;
    }
    
    public ReportClass createReportClass() {
        ReportClass reportClass = new ReportClass();
        return reportClass;
    }
    
    public void prepopulate(ReportClass obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(ReportClass obj, int level) {
        int x;
        int tot;
    }
    
    public ReportDef createReportDef() {
        ReportDef reportDef = new ReportDef();
        return reportDef;
    }
    
    public void prepopulate(ReportDef obj) {
        prepopulate(obj, 0);
    }
    public void prepopulate(ReportDef obj, int level) {
        int x;
        int tot;
        if (add(obj, ReportDef.P_ReportClass)) {
            // reportClass
            //    owned
            done(obj, ReportDef.P_ReportClass);
        }
    }
    
    public void populate(AppServer obj) {
        populate(obj, 0);
    }
    public void populate(AppServer obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setStarted((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setDemoMode(Math.random() < .5 ? true : false);
        obj.setTestOnly(Math.random() < .5 ? true : false);
        obj.setRelease(OAString.getDummyText(12, 0, 18));
        if (add(obj, AppServer.P_Reports)) {
            // reports
            tot = ((int) (Math.random()*4));
            tot -= obj.getReports().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Report report = null;
                if (Math.random() < .75) {
                    report = (Report) OAObjectCacheDelegate.getRandom(Report.class, 500);
                    if (report != null) obj.getReports().add(report);
                }
                if (report == null) {
                    report = createReport();
                    obj.getReports().add(report);
                    populate(report);
                }
            }
            done(obj, AppServer.P_Reports);
        }
    }
    
    public void populate(AppUser obj) {
        populate(obj, 0);
    }
    public void populate(AppUser obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setLoginId(OAString.getDummyText(14, 0, 35));
        obj.setPassword(OAString.getDummyText(12, 0, 50));
        obj.setAdmin(Math.random() < .5 ? true : false);
        obj.setSuperAdmin(Math.random() < .5 ? true : false);
        obj.setEditProcessed(Math.random() < .5 ? true : false);
        obj.setFirstName(OAString.getDummyText(12, 0, 35));
        obj.setLastName(OAString.getDummyText(22, 0, 55));
        if (Math.random() < .8) obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setNote(OAString.getDummyText(20, 0, 500));
        if (add(obj, AppUser.P_AppUserLogins)) {
            // appUserLogins
            tot = ((int) (Math.random()*4));
            tot -= obj.getAppUserLogins().size();
            for (int cnt=0; cnt<tot; cnt++) {
                AppUserLogin appUserLogin = null;
                appUserLogin = createAppUserLogin();
                obj.getAppUserLogins().add(appUserLogin);
                populate(appUserLogin);
            }
            done(obj, AppUser.P_AppUserLogins);
        }
        if (add(obj, AppUser.P_Reports)) {
            // reports
            tot = ((int) (Math.random()*4));
            tot -= obj.getReports().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Report report = null;
                if (Math.random() < .75) {
                    report = (Report) OAObjectCacheDelegate.getRandom(Report.class, 500);
                    if (report != null) obj.getReports().add(report);
                }
                if (report == null) {
                    report = createReport();
                    obj.getReports().add(report);
                    populate(report);
                }
            }
            done(obj, AppUser.P_Reports);
        }
    }
    
    public void populate(AppUserError obj) {
        populate(obj, 0);
    }
    public void populate(AppUserError obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setDateTime((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setMessage(OAString.getDummyText(35, 0, 250));
        obj.setStackTrace(OAString.getDummyText(40, 0, 500));
        obj.setReviewed((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setReviewNote(OAString.getDummyText(40, 0, 254));
        if (add(obj, AppUserError.P_Reports)) {
            // reports
            tot = ((int) (Math.random()*4));
            tot -= obj.getReports().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Report report = null;
                if (Math.random() < .75) {
                    report = (Report) OAObjectCacheDelegate.getRandom(Report.class, 500);
                    if (report != null) obj.getReports().add(report);
                }
                if (report == null) {
                    report = createReport();
                    obj.getReports().add(report);
                    populate(report);
                }
            }
            done(obj, AppUserError.P_Reports);
        }
    }
    
    public void populate(AppUserLogin obj) {
        populate(obj, 0);
    }
    public void populate(AppUserLogin obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setLocation(OAString.getDummyText(18, 0, 50));
        obj.setComputerName(OAString.getDummyText(14, 0, 50));
        obj.setDisconnected((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setConnectionId((int) (Math.random() * 900));
        obj.setHostName(OAString.getDummyText(14, 0, 50));
        obj.setIpAddress(OAString.getDummyText(15, 0, 20));
        obj.setTotalMemory((long) (Math.random() * 900));
        obj.setFreeMemory((long) (Math.random() * 900));
        if (add(obj, AppUserLogin.P_AppUserErrors)) {
            // appUserErrors
            tot = ((int) (Math.random()*4));
            tot -= obj.getAppUserErrors().size();
            for (int cnt=0; cnt<tot; cnt++) {
                AppUserError appUserError = null;
                appUserError = createAppUserError();
                obj.getAppUserErrors().add(appUserError);
                populate(appUserError);
            }
            done(obj, AppUserLogin.P_AppUserErrors);
        }
        if (add(obj, AppUserLogin.P_Reports)) {
            // reports
            tot = ((int) (Math.random()*4));
            tot -= obj.getReports().size();
            for (int cnt=0; cnt<tot; cnt++) {
                Report report = null;
                if (Math.random() < .75) {
                    report = (Report) OAObjectCacheDelegate.getRandom(Report.class, 500);
                    if (report != null) obj.getReports().add(report);
                }
                if (report == null) {
                    report = createReport();
                    obj.getReports().add(report);
                    populate(report);
                }
            }
            done(obj, AppUserLogin.P_Reports);
        }
    }
    
    public void populate(ImageStore obj) {
        populate(obj, 0);
    }
    public void populate(ImageStore obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setBytes(new byte[0]);
        obj.setOrigFileName(OAString.getDummyText(30, 0, 250));
    }
    
    public void populate(Report obj) {
        populate(obj, 0);
    }
    public void populate(Report obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setGenerated((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setHtml(OAString.getDummyText(30, 0, 500));
        if (add(obj, Report.P_ReportDef)) {
            // reportDef
            hub = (Hub) obj.getProperty(OAString.cpp(Report.P_CalcReportClass, ReportClass.P_ReportDefs));
            if (hub != null) {
                x = (int) (Math.random()*hub.getSize());
                obj.setReportDef((ReportDef) hub.getAt(x));
            }
            done(obj, Report.P_ReportDef);
        }
    }
    
    public void populate(ReportClass obj) {
        populate(obj, 0);
    }
    private String strReportClassClassName = "0"; // unique value for className
    public void populate(ReportClass obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getDummyText(18, 0, 55));
        strReportClassClassName = "" + (OAConv.toInt(strReportClassClassName)+1);
        obj.setClassName(strReportClassClassName);
        if (add(obj, ReportClass.P_ReportDefs)) {
            // reportDefs
            tot = ((int) (Math.random()*4));
            tot -= obj.getReportDefs().size();
            for (int cnt=0; cnt<tot; cnt++) {
                ReportDef reportDef = null;
                reportDef = createReportDef();
                obj.getReportDefs().add(reportDef);
                populate(reportDef);
            }
            done(obj, ReportClass.P_ReportDefs);
        }
    }
    
    public void populate(ReportDef obj) {
        populate(obj, 0);
    }
    public void populate(ReportDef obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getDummyText(15, 0, 55));
        obj.setTemplate(OAString.getDummyText(30, 0, 500));
        // seq is auto sequence
    }
    public void createSamples() {
        int x;
        // lookups
        x = 1;
        for (int i=0; i<x; i++) {
            AppServer appServer = createAppServer();
            ModelDelegate.getCreateOneAppServerHub().add(appServer);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            AppUser appUser = createAppUser();
            ModelDelegate.getAppUsers().add(appUser);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ReportClass reportClass = createReportClass();
            ModelDelegate.getReportClasses().add(reportClass);
        }
        
        // others
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ImageStore imageStore = createImageStore();
            hubImageStore.add(imageStore);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Report report = createReport();
            hubReport.add(report);
        }
         
        // Now prepopulate new objects
        // lookups
        for (AppServer appServer : ModelDelegate.getCreateOneAppServerHub()) {
            prepopulate(appServer);
        }
        for (AppUser appUser : ModelDelegate.getAppUsers()) {
            prepopulate(appUser);
        }
        for (ReportClass reportClass : ModelDelegate.getReportClasses()) {
            prepopulate(reportClass);
        }
        
        // others
        for (ImageStore imageStore : hubImageStore) {
            prepopulate(imageStore);
        }
        for (Report report : hubReport) {
            prepopulate(report);
        }
        
        // Now populate new objects
        // lookups
        for (AppServer appServer : ModelDelegate.getCreateOneAppServerHub()) {
            populate(appServer);
        }
        for (AppUser appUser : ModelDelegate.getAppUsers()) {
            populate(appUser);
        }
        for (ReportClass reportClass : ModelDelegate.getReportClasses()) {
            populate(reportClass);
        }
        
        // others
        for (ImageStore imageStore : hubImageStore) {
            populate(imageStore);
        }
        for (Report report : hubReport) {
            populate(report);
        }
    }
    
    // Hubs to hold sample data that is not in ModelDelegate
    private Hub<ImageStore> hubImageStore = new Hub<ImageStore>(ImageStore.class);
    private Hub<Report> hubReport = new Hub<Report>(Report.class);
    
    public static void main(String[] args) {
        OAObjectCallbackDelegate.demoAllowAllToPass(true);
        DataGenerator dg = new DataGenerator();
        dg.createSamples();
        System.out.println("createSamples is done");
    }
}
 
