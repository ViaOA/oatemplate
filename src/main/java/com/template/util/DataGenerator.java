// Generated by OABuilder
package com.template.util;

import java.util.Stack;

import com.template.delegate.ModelDelegate;
import com.template.model.oa.AppServer;
import com.template.model.oa.AppUser;
import com.template.model.oa.AppUserError;
import com.template.model.oa.AppUserLogin;
import com.viaoa.datasource.OASelect;
import com.viaoa.hub.Hub;
import com.viaoa.object.OALinkInfo;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCacheDelegate;
import com.viaoa.object.OAObjectEditQueryDelegate;
import com.viaoa.object.OAObjectInfo;
import com.viaoa.object.OAObjectInfoDelegate;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OAString;

public class DataGenerator {
	OASelect sel;
	Hub hub;
	final Stack<OALinkInfo> stack = new Stack<>();

	public boolean add(OAObject obj, String linkName) {
		if (stack.size() > 20) {
			return false;
		}
		OAObjectInfo oi = OAObjectInfoDelegate.getObjectInfo(obj);
		OALinkInfo li = oi.getLinkInfo(linkName);
		if (li == null) {
			throw new RuntimeException("link=" + linkName + ", does not exist for object=" + obj);
		}
		if (stack.contains(li)) {
			return false;
		}
		stack.push(li);
		return true;
	}

	public void done(OAObject obj, String linkName) {
		OAObjectInfo oi = OAObjectInfoDelegate.getObjectInfo(obj);
		OALinkInfo li = oi.getLinkInfo(linkName);
		if (li == null) {
			throw new RuntimeException("link=" + linkName + ", does not exist for object=" + obj);
		}
		if (stack.pop() != li) {
			throw new RuntimeException("link=" + linkName + ", for object=" + obj + ", is not on the top of the stack");
		}
	}

	public AppServer createAppServer() {
		AppServer appServer = new AppServer();
		return appServer;
	}

	public void prepopulate(AppServer obj) {
		prepopulate(obj, 0);
	}

	public void prepopulate(AppServer obj, int level) {
		int x;
		int tot;
		if (add(obj, AppServer.P_AppUserLogin)) {
			// appUserLogin
			if (Math.random() < .75) {
				obj.setAppUserLogin((AppUserLogin) OAObjectCacheDelegate.getRandom(AppUserLogin.class, 500));
			} else {
				AppUserLogin appUserLogin = createAppUserLogin();
				prepopulate(appUserLogin);
				obj.setAppUserLogin(appUserLogin);
			}
			done(obj, AppServer.P_AppUserLogin);
		}
	}

	public AppUser createAppUser() {
		AppUser appUser = new AppUser();
		return appUser;
	}

	public void prepopulate(AppUser obj) {
		prepopulate(obj, 0);
	}

	public void prepopulate(AppUser obj, int level) {
		int x;
		int tot;
	}

	public AppUserError createAppUserError() {
		AppUserError appUserError = new AppUserError();
		return appUserError;
	}

	public void prepopulate(AppUserError obj) {
		prepopulate(obj, 0);
	}

	public void prepopulate(AppUserError obj, int level) {
		int x;
		int tot;
		if (add(obj, AppUserError.P_AppUserLogin)) {
			// appUserLogin
			//    owned
			done(obj, AppUserError.P_AppUserLogin);
		}
	}

	public AppUserLogin createAppUserLogin() {
		AppUserLogin appUserLogin = new AppUserLogin();
		return appUserLogin;
	}

	public void prepopulate(AppUserLogin obj) {
		prepopulate(obj, 0);
	}

	public void prepopulate(AppUserLogin obj, int level) {
		int x;
		int tot;
		if (add(obj, AppUserLogin.P_AppUser)) {
			// appUser
			//    owned
			done(obj, AppUserLogin.P_AppUser);
		}
	}

	public void populate(AppServer obj) {
		populate(obj, 0);
	}

	public void populate(AppServer obj, int level) {
		int x;
		int tot;
		// id is auto assigned
		// created has a default value
		obj.setStarted((new OADateTime()).addDays((int) (Math.random() * 1000)));
		obj.setDemoMode(Math.random() < .5 ? true : false);
		obj.setRelease(OAString.getDummyText(18, 0, 18));
	}

	public void populate(AppUser obj) {
		populate(obj, 0);
	}

	public void populate(AppUser obj, int level) {
		int x;
		int tot;
		// id is auto assigned
		obj.setLoginId(OAString.getDummyText(12, 0, 24));
		obj.setPassword(OAString.getDummyText(12, 0, 50));
		obj.setAdmin(Math.random() < .5 ? true : false);
		obj.setFirstName(OAString.getDummyText(12, 0, 30));
		obj.setLastName(OAString.getDummyText(12, 0, 55));
		if (Math.random() < .8) {
			obj.setInactiveDate((OADate) (new OADate()).addDays((int) (Math.random() * 1000)));
		}
		obj.setEditProcessed(Math.random() < .5 ? true : false);
		obj.setNote(OAString.getDummyText(20, 0, 500));
		if (add(obj, AppUser.P_AppUserLogins)) {
			// appUserLogins
			tot = ((int) (Math.random() * 4));
			tot -= obj.getAppUserLogins().size();
			for (int cnt = 0; cnt < tot; cnt++) {
				AppUserLogin appUserLogins = createAppUserLogin();
				obj.getAppUserLogins().add(appUserLogins);
				populate(appUserLogins);
			}
			done(obj, AppUser.P_AppUserLogins);
		}
	}

	public void populate(AppUserError obj) {
		populate(obj, 0);
	}

	public void populate(AppUserError obj, int level) {
		int x;
		int tot;
		// id is auto assigned
		obj.setDateTime((new OADateTime()).addDays((int) (Math.random() * 1000)));
		obj.setMessage(OAString.getDummyText(35, 0, 250));
		obj.setStackTrace(OAString.getDummyText(40, 0, 500));
		obj.setReviewed((OADate) (new OADate()).addDays((int) (Math.random() * 1000)));
		obj.setReviewNote(OAString.getDummyText(40, 0, 254));
	}

	public void populate(AppUserLogin obj) {
		populate(obj, 0);
	}

	public void populate(AppUserLogin obj, int level) {
		int x;
		int tot;
		// id is auto assigned
		// created has a default value
		obj.setLocation(OAString.getDummyText(18, 0, 50));
		obj.setComputerName(OAString.getDummyText(32, 0, 32));
		obj.setDisconnected((new OADateTime()).addDays((int) (Math.random() * 1000)));
		obj.setConnectionId((int) (Math.random() * 900));
		obj.setHostName(OAString.getDummyText(14, 0, 35));
		obj.setIpAddress(OAString.getDummyText(15, 0, 20));
		obj.setTotalMemory((long) (Math.random() * 900));
		obj.setFreeMemory((long) (Math.random() * 900));
		if (add(obj, AppUserLogin.P_AppUserErrors)) {
			// appUserErrors
			tot = ((int) (Math.random() * 4));
			tot -= obj.getAppUserErrors().size();
			for (int cnt = 0; cnt < tot; cnt++) {
				AppUserError appUserErrors = createAppUserError();
				obj.getAppUserErrors().add(appUserErrors);
				populate(appUserErrors);
			}
			done(obj, AppUserLogin.P_AppUserErrors);
		}
	}

	public void createSamples() {
		int x;
		// lookups
		x = 5 + ((int) (Math.random() * 20));
		for (int i = 0; i < x; i++) {
			AppServer appServer = createAppServer();
			ModelDelegate.getCreateOneAppServerHub().add(appServer);
		}
		x = 5 + ((int) (Math.random() * 20));
		for (int i = 0; i < x; i++) {
			AppUser appUser = createAppUser();
			ModelDelegate.getAppUsers().add(appUser);
		}

		// others

		// Now prepopulate new objects
		// lookups
		for (AppServer appServer : ModelDelegate.getCreateOneAppServerHub()) {
			prepopulate(appServer);
		}
		for (AppUser appUser : ModelDelegate.getAppUsers()) {
			prepopulate(appUser);
		}

		// others

		// Now populate new objects
		// lookups
		for (AppServer appServer : ModelDelegate.getCreateOneAppServerHub()) {
			populate(appServer);
		}
		for (AppUser appUser : ModelDelegate.getAppUsers()) {
			populate(appUser);
		}

		// others
	}

	// Hubs to hold sample data that is not in ModelDelegate

	public static void main(String[] args) {
		OAObjectEditQueryDelegate.demoAllowAllToPass(true);
		DataGenerator dg = new DataGenerator();
		dg.createSamples();
		System.out.println("createSamples is done");
	}
}
