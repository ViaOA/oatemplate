// Generated by OABuilder
package com.template.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.template.model.oa.*;
import com.template.model.oa.propertypath.*;
import com.template.model.oa.search.*;
import com.template.model.oa.filter.*;
import com.template.model.search.*;
import com.template.model.filter.*;
import com.template.delegate.ModelDelegate;
import com.template.resource.Resource;

public class ReportClassModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ReportClassModel.class.getName());
    
    // Hubs
    protected Hub<ReportClass> hub;
    // selected reportClasses
    protected Hub<ReportClass> hubMultiSelect;
    // detail hubs
    protected Hub<ReportDef> hubReportDefs;
    
    // ObjectModels
    protected ReportDefModel modelReportDefs;
    
    public ReportClassModel() {
        setDisplayName("Report Class");
        setPluralDisplayName("Report Classes");
    }
    
    public ReportClassModel(Hub<ReportClass> hubReportClass) {
        this();
        if (hubReportClass != null) HubDelegate.setObjectClass(hubReportClass, ReportClass.class);
        this.hub = hubReportClass;
    }
    public ReportClassModel(ReportClass reportClass) {
        this();
        getHub().add(reportClass);
        getHub().setPos(0);
    }
    
    public Hub<ReportClass> getOriginalHub() {
        return getHub();
    }
    
    public Hub<ReportDef> getReportDefs() {
        if (hubReportDefs == null) {
            hubReportDefs = getHub().getDetailHub(ReportClass.P_ReportDefs);
        }
        return hubReportDefs;
    }
    public ReportClass getReportClass() {
        return getHub().getAO();
    }
    
    public Hub<ReportClass> getHub() {
        if (hub == null) {
            hub = new Hub<ReportClass>(ReportClass.class);
        }
        return hub;
    }
    
    public Hub<ReportClass> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ReportClass>(ReportClass.class);
        }
        return hubMultiSelect;
    }
    
    public ReportDefModel getReportDefsModel() {
        if (modelReportDefs != null) return modelReportDefs;
        modelReportDefs = new ReportDefModel(getReportDefs());
        modelReportDefs.setDisplayName("Report Def");
        modelReportDefs.setPluralDisplayName("Report Defs");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getReportDefs())) {
            modelReportDefs.setCreateUI(false);
        }
        modelReportDefs.setForJfc(getForJfc());
        modelReportDefs.setAllowNew(true);
        modelReportDefs.setAllowSave(true);
        modelReportDefs.setAllowAdd(false);
        modelReportDefs.setAllowMove(false);
        modelReportDefs.setAllowRemove(false);
        modelReportDefs.setAllowDelete(true);
        modelReportDefs.setAllowRefresh(false);
        modelReportDefs.setAllowSearch(false);
        modelReportDefs.setAllowHubSearch(false);
        modelReportDefs.setAllowDownload(true);
        modelReportDefs.setAllowGotoEdit(true);
        modelReportDefs.setViewOnly(getViewOnly());
        modelReportDefs.setAllowTableFilter(true);
        modelReportDefs.setAllowTableSorting(true);
        modelReportDefs.setAllowMultiSelect(false);
        modelReportDefs.setAllowCopy(false);
        modelReportDefs.setAllowCut(false);
        modelReportDefs.setAllowPaste(false);
        // call ReportClass.reportDefsModelCallback(ReportDefModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ReportClass.class, ReportClass.P_ReportDefs, modelReportDefs);
    
        return modelReportDefs;
    }
    
    public HubCopy<ReportClass> createHubCopy() {
        Hub<ReportClass> hubReportClassx = new Hub<>(ReportClass.class);
        HubCopy<ReportClass> hc = new HubCopy<>(getHub(), hubReportClassx, true);
        return hc;
    }
    public ReportClassModel createCopy() {
        ReportClassModel mod = new ReportClassModel(createHubCopy().getHub());
        return mod;
    }
}

