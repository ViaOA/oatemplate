// Generated by OABuilder
package com.template.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.template.model.oa.*;
import com.template.model.oa.propertypath.*;
import com.template.model.oa.search.*;
import com.template.model.oa.filter.*;
import com.template.model.search.*;
import com.template.model.filter.*;
import com.template.delegate.ModelDelegate;
import com.template.resource.Resource;

public class ReportModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ReportModel.class.getName());
    
    // Hubs
    protected Hub<Report> hub;
    // selected reports
    protected Hub<Report> hubMultiSelect;
    // detail hubs
    protected Hub<ReportClass> hubCalcReportClass;
    protected Hub<ReportDef> hubReportDef;
    
    // AddHubs used for references
    protected Hub<ReportDef> hubReportDefSelectFrom;
    
    // ObjectModels
    protected ReportClassModel modelCalcReportClass;
    protected ReportDefModel modelReportDef;
    
    // selectFrom
    protected ReportDefModel modelReportDefSelectFrom;
    
    // SearchModels used for references
    protected ReportDefSearchModel modelReportDefSearch;
    
    public ReportModel() {
        setDisplayName("Report");
        setPluralDisplayName("Reports");
    }
    
    public ReportModel(Hub<Report> hubReport) {
        this();
        if (hubReport != null) HubDelegate.setObjectClass(hubReport, Report.class);
        this.hub = hubReport;
    }
    public ReportModel(Report report) {
        this();
        getHub().add(report);
        getHub().setPos(0);
    }
    
    public Hub<Report> getOriginalHub() {
        return getHub();
    }
    
    public Hub<ReportClass> getCalcReportClassHub() {
        if (hubCalcReportClass != null) return hubCalcReportClass;
        // this is a calculated
        hubCalcReportClass = getHub().getDetailHub(Report.P_CalcReportClass);
        return hubCalcReportClass;
    }
    public Hub<ReportDef> getReportDefHub() {
        if (hubReportDef != null) return hubReportDef;
        hubReportDef = getHub().getDetailHub(Report.P_ReportDef);
        return hubReportDef;
    }
    public Hub<ReportDef> getReportDefSelectFromHub() {
        if (hubReportDefSelectFrom != null) return hubReportDefSelectFrom;
        hubReportDefSelectFrom = new Hub<ReportDef>(ReportDef.class);
        Hub<ReportDef>hubReportDefSelectFrom1 = new Hub<ReportDef>(ReportDef.class);
        new HubMerger(getHub(), hubReportDefSelectFrom1, ReportPP.calcReportClass().reportDefs().pp, false);
        HubCombined<ReportDef> hubCombined = new HubCombined(hubReportDefSelectFrom, hubReportDefSelectFrom1, getReportDefHub());
        hubReportDefSelectFrom.setLinkHub(getHub(), Report.P_ReportDef); 
        return hubReportDefSelectFrom;
    }
    public Report getReport() {
        return getHub().getAO();
    }
    
    public Hub<Report> getHub() {
        if (hub == null) {
            hub = new Hub<Report>(Report.class);
        }
        return hub;
    }
    
    public Hub<Report> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Report>(Report.class);
        }
        return hubMultiSelect;
    }
    
    public ReportClassModel getCalcReportClassModel() {
        if (modelCalcReportClass != null) return modelCalcReportClass;
        modelCalcReportClass = new ReportClassModel(getCalcReportClassHub());
        modelCalcReportClass.setDisplayName("Report Class");
        modelCalcReportClass.setPluralDisplayName("Report Classes");
        modelCalcReportClass.setForJfc(getForJfc());
        modelCalcReportClass.setAllowNew(false);
        modelCalcReportClass.setAllowSave(false);
        modelCalcReportClass.setAllowAdd(false);
        modelCalcReportClass.setAllowRemove(false);
        modelCalcReportClass.setAllowClear(false);
        modelCalcReportClass.setAllowDelete(false);
        modelCalcReportClass.setAllowSearch(false);
        modelCalcReportClass.setAllowHubSearch(false);
        modelCalcReportClass.setAllowGotoEdit(false);
        modelCalcReportClass.setViewOnly(true);
        // call Report.calcReportClassModelCallback(ReportClassModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Report.class, Report.P_CalcReportClass, modelCalcReportClass);
    
        return modelCalcReportClass;
    }
    public ReportDefModel getReportDefModel() {
        if (modelReportDef != null) return modelReportDef;
        modelReportDef = new ReportDefModel(getReportDefHub());
        modelReportDef.setDisplayName("Report Def");
        modelReportDef.setPluralDisplayName("Report Defs");
        modelReportDef.setForJfc(getForJfc());
        modelReportDef.setAllowNew(false);
        modelReportDef.setAllowSave(true);
        modelReportDef.setAllowAdd(false);
        modelReportDef.setAllowRemove(true);
        modelReportDef.setAllowClear(true);
        modelReportDef.setAllowDelete(false);
        modelReportDef.setAllowSearch(true);
        modelReportDef.setAllowHubSearch(false);
        modelReportDef.setAllowGotoEdit(true);
        modelReportDef.setViewOnly(true);
        // call Report.reportDefModelCallback(ReportDefModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Report.class, Report.P_ReportDef, modelReportDef);
    
        return modelReportDef;
    }
    
    public ReportDefModel getReportDefSelectFromModel() {
        if (modelReportDefSelectFrom != null) return modelReportDefSelectFrom;
        modelReportDefSelectFrom = new ReportDefModel(getReportDefSelectFromHub());
        modelReportDefSelectFrom.setDisplayName("Report Def");
        modelReportDefSelectFrom.setPluralDisplayName("Report Defs");
        modelReportDefSelectFrom.setForJfc(getForJfc());
        modelReportDefSelectFrom.setAllowNew(false);
        modelReportDefSelectFrom.setAllowSave(true);
        modelReportDefSelectFrom.setAllowAdd(false);
        modelReportDefSelectFrom.setAllowMove(false);
        modelReportDefSelectFrom.setAllowRemove(false);
        modelReportDefSelectFrom.setAllowDelete(false);
        modelReportDefSelectFrom.setAllowSearch(true);
        modelReportDefSelectFrom.setAllowHubSearch(true);
        modelReportDefSelectFrom.setAllowGotoEdit(true);
        modelReportDefSelectFrom.setViewOnly(getViewOnly());
        modelReportDefSelectFrom.setAllowNew(false);
        modelReportDefSelectFrom.setAllowTableFilter(true);
        modelReportDefSelectFrom.setAllowTableSorting(true);
        modelReportDefSelectFrom.setAllowCut(false);
        modelReportDefSelectFrom.setAllowCopy(false);
        modelReportDefSelectFrom.setAllowPaste(false);
        modelReportDefSelectFrom.setAllowMultiSelect(false);
        return modelReportDefSelectFrom;
    }
    public ReportDefSearchModel getReportDefSearchModel() {
        if (modelReportDefSearch != null) return modelReportDefSearch;
        modelReportDefSearch = new ReportDefSearchModel();
        OAFilter filter = new OAInFilter(ReportModel.this.getHub(), ReportPP.calcReportClass().reportDefs().pp);
        modelReportDefSearch.getReportDefSearch().setExtraWhereFilter(filter);
        return modelReportDefSearch;
    }
    
    public HubCopy<Report> createHubCopy() {
        Hub<Report> hubReportx = new Hub<>(Report.class);
        HubCopy<Report> hc = new HubCopy<>(getHub(), hubReportx, true);
        return hc;
    }
    public ReportModel createCopy() {
        ReportModel mod = new ReportModel(createHubCopy().getHub());
        return mod;
    }
}

