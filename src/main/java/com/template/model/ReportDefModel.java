// Generated by OABuilder
package com.template.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.template.model.oa.*;
import com.template.model.oa.propertypath.*;
import com.template.model.oa.search.*;
import com.template.model.oa.filter.*;
import com.template.model.search.*;
import com.template.model.filter.*;
import com.template.delegate.ModelDelegate;
import com.template.resource.Resource;

public class ReportDefModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ReportDefModel.class.getName());
    
    // Hubs
    protected Hub<ReportDef> hub;
    // selected reportDefs
    protected Hub<ReportDef> hubMultiSelect;
    // detail hubs
    protected Hub<ReportClass> hubReportClass;
    
    // AddHubs used for references
    protected Hub<ReportClass> hubReportClassSelectFrom;
    
    // ObjectModels
    protected ReportClassModel modelReportClass;
    
    // selectFrom
    protected ReportClassModel modelReportClassSelectFrom;
    
    public ReportDefModel() {
        setDisplayName("Report Def");
        setPluralDisplayName("Report Defs");
    }
    
    public ReportDefModel(Hub<ReportDef> hubReportDef) {
        this();
        if (hubReportDef != null) HubDelegate.setObjectClass(hubReportDef, ReportDef.class);
        this.hub = hubReportDef;
    }
    public ReportDefModel(ReportDef reportDef) {
        this();
        getHub().add(reportDef);
        getHub().setPos(0);
    }
    
    public Hub<ReportDef> getOriginalHub() {
        return getHub();
    }
    
    public Hub<ReportClass> getReportClassHub() {
        if (hubReportClass != null) return hubReportClass;
        // this is the owner, use detailHub
        hubReportClass = getHub().getDetailHub(ReportDef.P_ReportClass);
        return hubReportClass;
    }
    public Hub<ReportClass> getReportClassSelectFromHub() {
        if (hubReportClassSelectFrom != null) return hubReportClassSelectFrom;
        hubReportClassSelectFrom = new Hub<ReportClass>(ReportClass.class);
        Hub<ReportClass> hubReportClassSelectFrom1 = ModelDelegate.getReportClasses().createSharedHub();
        HubCombined<ReportClass> hubCombined = new HubCombined(hubReportClassSelectFrom, hubReportClassSelectFrom1, getReportClassHub());
        hubReportClassSelectFrom.setLinkHub(getHub(), ReportDef.P_ReportClass); 
        return hubReportClassSelectFrom;
    }
    public ReportDef getReportDef() {
        return getHub().getAO();
    }
    
    public Hub<ReportDef> getHub() {
        if (hub == null) {
            hub = new Hub<ReportDef>(ReportDef.class);
        }
        return hub;
    }
    
    public Hub<ReportDef> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ReportDef>(ReportDef.class);
        }
        return hubMultiSelect;
    }
    
    public ReportClassModel getReportClassModel() {
        if (modelReportClass != null) return modelReportClass;
        modelReportClass = new ReportClassModel(getReportClassHub());
        modelReportClass.setDisplayName("Report Class");
        modelReportClass.setPluralDisplayName("Report Classes");
        modelReportClass.setForJfc(getForJfc());
        modelReportClass.setAllowNew(false);
        modelReportClass.setAllowSave(true);
        modelReportClass.setAllowAdd(false);
        modelReportClass.setAllowRemove(false);
        modelReportClass.setAllowClear(false);
        modelReportClass.setAllowDelete(false);
        modelReportClass.setAllowSearch(false);
        modelReportClass.setAllowHubSearch(false);
        modelReportClass.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelReportClass.setCreateUI(li == null || !ReportDef.P_ReportClass.equalsIgnoreCase(li.getName()) );
        modelReportClass.setViewOnly(getViewOnly());
        // call ReportDef.reportClassModelCallback(ReportClassModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ReportDef.class, ReportDef.P_ReportClass, modelReportClass);
    
        return modelReportClass;
    }
    
    public ReportClassModel getReportClassSelectFromModel() {
        if (modelReportClassSelectFrom != null) return modelReportClassSelectFrom;
        modelReportClassSelectFrom = new ReportClassModel(getReportClassSelectFromHub());
        modelReportClassSelectFrom.setDisplayName("Report Class");
        modelReportClassSelectFrom.setPluralDisplayName("Report Classes");
        modelReportClassSelectFrom.setForJfc(getForJfc());
        modelReportClassSelectFrom.setAllowNew(false);
        modelReportClassSelectFrom.setAllowSave(true);
        modelReportClassSelectFrom.setAllowAdd(false);
        modelReportClassSelectFrom.setAllowMove(false);
        modelReportClassSelectFrom.setAllowRemove(false);
        modelReportClassSelectFrom.setAllowDelete(false);
        modelReportClassSelectFrom.setAllowSearch(false);
        modelReportClassSelectFrom.setAllowHubSearch(true);
        modelReportClassSelectFrom.setAllowGotoEdit(true);
        modelReportClassSelectFrom.setViewOnly(getViewOnly());
        modelReportClassSelectFrom.setAllowNew(false);
        modelReportClassSelectFrom.setAllowTableFilter(true);
        modelReportClassSelectFrom.setAllowTableSorting(true);
        modelReportClassSelectFrom.setAllowCut(false);
        modelReportClassSelectFrom.setAllowCopy(false);
        modelReportClassSelectFrom.setAllowPaste(false);
        modelReportClassSelectFrom.setAllowMultiSelect(false);
        return modelReportClassSelectFrom;
    }
    
    public HubCopy<ReportDef> createHubCopy() {
        Hub<ReportDef> hubReportDefx = new Hub<>(ReportDef.class);
        HubCopy<ReportDef> hc = new HubCopy<>(getHub(), hubReportDefx, true);
        return hc;
    }
    public ReportDefModel createCopy() {
        ReportDefModel mod = new ReportDefModel(createHubCopy().getHub());
        return mod;
    }
}

