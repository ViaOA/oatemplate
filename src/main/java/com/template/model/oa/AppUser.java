// Generated by OABuilder
package com.template.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.template.delegate.oa.*;
import com.template.model.oa.filter.*;
import com.template.model.oa.propertypath.*;
import com.viaoa.util.OADate;
 
@OAClass(
    shortName = "au",
    displayName = "App User",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "displayName"
)
@OATable(
)
public class AppUser extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(AppUser.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_LoginId = "LoginId";
    public static final String P_LoginId = "LoginId";
    public static final String PROPERTY_Password = "Password";
    public static final String P_Password = "Password";
    public static final String PROPERTY_Admin = "Admin";
    public static final String P_Admin = "Admin";
    public static final String PROPERTY_FirstName = "FirstName";
    public static final String P_FirstName = "FirstName";
    public static final String PROPERTY_LastName = "LastName";
    public static final String P_LastName = "LastName";
    public static final String PROPERTY_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate = "InactiveDate";
    public static final String PROPERTY_EditProcessed = "EditProcessed";
    public static final String P_EditProcessed = "EditProcessed";
    public static final String PROPERTY_Note = "Note";
    public static final String P_Note = "Note";
     
    public static final String PROPERTY_FullName = "FullName";
    public static final String P_FullName = "FullName";
    public static final String PROPERTY_DisplayName = "DisplayName";
    public static final String P_DisplayName = "DisplayName";
     
    public static final String PROPERTY_AppUserLogins = "AppUserLogins";
    public static final String P_AppUserLogins = "AppUserLogins";
     
    protected volatile int id;
    protected volatile String loginId;
    protected volatile String password;
    protected volatile boolean admin;
    protected volatile String firstName;
    protected volatile String lastName;
    protected volatile OADate inactiveDate;
    protected volatile boolean editProcessed;
    protected volatile String note;
     
    // Links to other objects.
    protected transient Hub<AppUserLogin> hubAppUserLogins;
     
    public AppUser() {
    }
     
    public AppUser(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayName = "Login Id", maxLength = 24, displayLength = 12)
    @OAColumn(maxLength = 24)
    public String getLoginId() {
        return loginId;
    }
    public void setLoginId(String newValue) {
        String old = loginId;
        fireBeforePropertyChange(P_LoginId, old, newValue);
        this.loginId = newValue;
        firePropertyChange(P_LoginId, old, this.loginId);
    }
     
    @OAProperty(maxLength = 50, displayLength = 12, columnLength = 10, isPassword = true)
    @OAColumn(maxLength = 50)
    public String getPassword() {
        return password;
    }
    public void setPassword(String newValue) {
        String old = password;
        fireBeforePropertyChange(P_Password, old, newValue);
        this.password = newValue;
        firePropertyChange(P_Password, old, this.password);
    }
     
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getAdmin() {
        return admin;
    }
    public void setAdmin(boolean newValue) {
        boolean old = admin;
        fireBeforePropertyChange(P_Admin, old, newValue);
        this.admin = newValue;
        firePropertyChange(P_Admin, old, this.admin);
    }
     
    @OAProperty(displayName = "First Name", maxLength = 30, displayLength = 12)
    @OAColumn(maxLength = 30)
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String newValue) {
        String old = firstName;
        fireBeforePropertyChange(P_FirstName, old, newValue);
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
     
    @OAProperty(displayName = "Last Name", maxLength = 55, displayLength = 12)
    @OAColumn(maxLength = 55)
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String newValue) {
        String old = lastName;
        fireBeforePropertyChange(P_LastName, old, newValue);
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
     
    @OAProperty(displayName = "Inactive Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInactiveDate() {
        return inactiveDate;
    }
    public void setInactiveDate(OADate newValue) {
        OADate old = inactiveDate;
        fireBeforePropertyChange(P_InactiveDate, old, newValue);
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
     
    @OAProperty(displayName = "Edit Processed", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getEditProcessed() {
        return editProcessed;
    }
    public void setEditProcessed(boolean newValue) {
        boolean old = editProcessed;
        fireBeforePropertyChange(P_EditProcessed, old, newValue);
        this.editProcessed = newValue;
        firePropertyChange(P_EditProcessed, old, this.editProcessed);
    }
     
    @OAProperty(maxLength = 40, displayLength = 20, columnLength = 15)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNote() {
        return note;
    }
    public void setNote(String newValue) {
        String old = note;
        fireBeforePropertyChange(P_Note, old, newValue);
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
     
    @OACalculatedProperty(displayName = "Full Name", displayLength = 23, columnLength = 16, properties = {P_FirstName, P_LastName})
    public String getFullName() {
        String fullName = "";
        // firstName
        firstName = this.getFirstName();
        if (firstName != null) {
            if (fullName.length() > 0) fullName += " ";
            fullName += firstName;
        }
    
        // lastName
        lastName = this.getLastName();
        if (lastName != null) {
            if (fullName.length() > 0) fullName += " ";
            fullName += lastName;
        }
    
        return fullName;
    }
     
    @OACalculatedProperty(displayName = "Display Name", displayLength = 28, columnLength = 22, properties = {P_LoginId, P_FullName})
    public String getDisplayName() {
        String displayName = "";
        loginId = this.getLoginId();
        if (loginId != null) {
            displayName = loginId;
        }
        if (displayName.length() > 0) displayName += " ";
        displayName += " (";
        String fullName = this.getFullName();
        if (fullName != null) {
            displayName += fullName;
        }
        displayName += ")";
        return displayName;
    }
     
    @OAMany(
        displayName = "App User Logins", 
        toClass = AppUserLogin.class, 
        owner = true, 
        reverseName = AppUserLogin.P_AppUser, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<AppUserLogin> getAppUserLogins() {
        if (hubAppUserLogins == null) {
            hubAppUserLogins = (Hub<AppUserLogin>) getHub(P_AppUserLogins);
        }
        return hubAppUserLogins;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.loginId = rs.getString(2);
        this.password = rs.getString(3);
        this.admin = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AppUser.P_Admin, true);
        }
        this.firstName = rs.getString(5);
        this.lastName = rs.getString(6);
        java.sql.Date date;
        date = rs.getDate(7);
        if (date != null) this.inactiveDate = new OADate(date);
        this.editProcessed = rs.getBoolean(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AppUser.P_EditProcessed, true);
        }
        this.note = rs.getString(9);
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
    
//qqqqqqqqqqqq used for OAWeb component testing qqqqqqqqqqqqqqqqqqq    
    
    public static final String P_CurrentTime = "CurrentTime";
    public OATime getCurrentTime() {
        return new OATime();
    }
    public void setCurrentTime(OATime t) {
    }

    public static final String P_Now = "Now";
    public OADateTime getNow() {
        return new OADateTime();
    }
    public void setNow(OADateTime dt) {
    }

    private int testNumber;
    public static final String P_TestNumber = "TestNumber";
    public int getTestNumber() {
        return testNumber;
    }
    public void setTestNumber(int x) {
        this.testNumber = x;
    }
}
 
