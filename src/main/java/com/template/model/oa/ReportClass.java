// Generated by OABuilder
package com.template.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.template.delegate.oa.*;
import com.template.model.oa.filter.*;
import com.template.model.oa.propertypath.*;
 
/**
  Created at startup by ObjectController, so that each Report one reference/link has a ReportClass to represent it.
*/
@OAClass(
    lowerName = "reportClass",
    pluralName = "ReportClasses",
    shortName = "rpc",
    displayName = "Report Class",
    description = "Created at startup by ObjectController, so that each Report one reference/link has a ReportClass to represent it.",
    isLookup = true,
    isPreSelect = true,
    isProcessed = true,
    displayProperty = "name",
    noPojo = true
)
@OATable(
    indexes = {
        @OAIndex(name = "ReportClassClassName", unique = true, columns = {@OAIndexColumn(name = "ClassName", lowerName = "ClassNameLower")})
    }
)
public class ReportClass extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ReportClass.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Name = "name";
    public static final String P_ClassName = "className";
     
    public static final String P_CalcReports = "calcReports";
    public static final String P_ReportDefs = "reportDefs";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile String className;
     
    // Links to other objects.
    protected transient Hub<ReportDef> hubReportDefs;
     
    public ReportClass() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public ReportClass(int id) {
        this();
        setId(id);
    }

    @OAProperty(lowerName = "id", isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(name = "Id", sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }

    @OAProperty(lowerName = "created", defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true, ignoreTimeZone = true)
    @OAColumn(name = "Created", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }

    @OAProperty(lowerName = "name", maxLength = 55, displayLength = 18)
    @OAColumn(name = "Name", maxLength = 55)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }

    @OAProperty(lowerName = "className", displayName = "Class Name", maxLength = 75, isUnique = true, displayLength = 18)
    @OAColumn(name = "ClassName", maxLength = 75, lowerName = "ClassNameLower")
    public String getClassName() {
        return className;
    }
    public void setClassName(String newValue) {
        String old = className;
        fireBeforePropertyChange(P_ClassName, old, newValue);
        this.className = newValue;
        firePropertyChange(P_ClassName, old, this.className);
    }

    @OAMany(
        displayName = "Reports", 
        toClass = Report.class, 
        isCalculated = true, 
        reverseName = Report.P_CalcReportClass, 
        createMethod = false
    )
    private Hub<Report> getCalcReports() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }

    @OAMany(
        displayName = "Report Defs", 
        toClass = ReportDef.class, 
        owner = true, 
        reverseName = ReportDef.P_ReportClass, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<ReportDef> getReportDefs() {
        if (hubReportDefs == null) {
            hubReportDefs = (Hub<ReportDef>) getHub(P_ReportDefs);
        }
        return hubReportDefs;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.className = rs.getString(4);

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
