// Generated by OABuilder 

package com.template.view.oa;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.awt.Dialog.*;
import java.lang.ref.WeakReference;
import java.util.*;
import java.util.Map.Entry;
import java.util.logging.*;
import java.util.concurrent.atomic.AtomicInteger;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.*;
import javax.swing.event.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.jfc.*;
import com.viaoa.jfc.border.*;
import com.viaoa.jfc.control.*;
import com.viaoa.jfc.table.*;
import com.viaoa.jfc.text.*;
import com.viaoa.image.*;
import com.viaoa.jfcapp.*;
import com.viaoa.util.*;

import com.template.model.*;
import com.template.model.method.*;
import com.template.model.search.*;
import com.template.model.oa.AppUser;
import com.template.model.oa.*;
import com.template.model.oa.propertypath.*;
import com.template.model.oa.method.*;
import com.template.model.oa.custom.*;
import com.template.delegate.*;
import com.template.delegate.oa.*;
import com.template.resource.Resource;
import com.template.view.*;

public class AppUserJfcBase implements OAModelJfcInterface {
    protected static Logger LOG = Logger.getLogger(AppUserJfc.class.getName());
    
    public static final String PP_Display    = OAString.cpp(AppUser.P_DisplayName);
    public static final String PP_Icon       = null;
    public static final String PP_Image      = null;
    public static final String PP_ForeColor  = null;
    public static final String PP_BackColor  = null;
    public static final String PP_IconColor  = null;
    public static final String PP_Font       = null;
    // Model
    protected AppUserModel model;
    
    // Tree
    protected OATreeNode lastTreeNode;  // used by getTreeUsed()
    protected OATreeTitleNode titleNode;
    protected OATreeNode node;
    
    // ComboBox
    protected OAComboBox cbo;
    protected OATableComboBox cboTable;
    
    // List
    protected OAList lst;
    
    // edit dialog
    private WeakReference<JDialog> wrEditDialog;
    
    // Card Panel
    public static final String CARD_List = "list";
    public static final String CARD_Edit = "edit";
    protected static final String CARD_AppUserLogins = "AppUserLogins";
    protected int TAB_AppUserLogins = -1;
    protected JPanel cardPanel;
    protected CardLayout cardLayout;
    protected JTabbedPane tabbedPane;
    
    // Search
    protected AppUserSearchJfc jfcSearch;
    // hub Search
    protected AppUserSearchJfc jfcSearchHub;
    // Add
    protected AppUserSearchJfc jfcAdd;
    
    
    // focus components
    protected OATextField txtFirstName;
    protected OATextField tableTxtFirstName;
    protected AppUserLoginJfc jfcAppUserLogins;
    
    public AppUserJfcBase() {
        this.model = new AppUserModel();
        this.model.setForJfc(true);
        OAModelJfcUtil.register(this);
    }
    
    public AppUserJfcBase(Hub<AppUser> hubAppUser) {
        this.model = new AppUserModel(hubAppUser);
        this.model.setForJfc(true);
        OAModelJfcUtil.register(this);
    }
    public AppUserJfcBase(AppUserModel modelAppUser) {
        if (modelAppUser == null) this.model = new AppUserModel();
        else this.model = modelAppUser;
        this.model.setForJfc(true);
        OAModelJfcUtil.register(this);
    }
    
    // Hub
    public Hub<AppUser> getHub() {
        return model.getHub();
    }
    
    private int level;
    public int getLevel() {
        return this.level;
    }
    public void setLevel(int level) {
        this.level = level;
    }
    
    
    // Model
    public AppUserModel getModel() {
        return model;
    }
    
    
    
    // Images
    public static Icon getIcon() {
        return Resource.getJarIcon("appUser.gif");
    }
    public static Icon getTitleIcon() {
        return Resource.getJarIcon("appUsers.gif");
    }
    
    // Tree
    public OATree getTreeUsed() {
        if (lastTreeNode != null) return lastTreeNode.getTree();
        return null;
    }
    protected void setLastTreeNode(OATreeNode tn) {
        if (lastTreeNode == null || lastTreeNode.getTree() == null) {
            lastTreeNode = tn;
        }
    }
    public OATreeTitleNode getTreeTitleNode() {
        if (titleNode == null) {
            titleNode = createTreeTitleNode();
        }
        return titleNode;
    }
    
    public OATreeTitleNode createTreeTitleNode() {
        OATreeTitleNode treeTitleNode = new OATreeTitleNode(getModel().getPluralDisplayName()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                onShowListPanel();
            }
            JLabel lbl;
            @Override
            public Component getTreeCellRendererComponent(Component comp,
                JTree tree, Object value, boolean selected,
                boolean expanded, boolean leaf, int row, boolean hasFocus)
            {
                comp = super.getTreeCellRendererComponent(comp, tree, value, selected, expanded, leaf, row, hasFocus);
                if (lbl == null) {
                    if (comp instanceof JLabel) lbl = (JLabel) comp;
                }
                if (lbl != null) lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
                return comp;
            }
        };
        treeTitleNode.setIcon(getTitleIcon());
        treeTitleNode.setPopupMenu(createTreeTitleNodePopupMenu(treeTitleNode));
        treeTitleNode.setMaxImageHeight(20);
        treeTitleNode.setMaxImageWidth(32);
        setLastTreeNode(treeTitleNode);
        return treeTitleNode;
     }
    
    public JPopupMenu createTreeTitleNodePopupMenu(OATreeNode tn) {
        JPopupMenu menu = new JPopupMenu();
    
        JMenuItem miSearch = createSearchMenuItem();
        if (miSearch != null) menu.add(miSearch);
        JMenuItem miNew = createNewMenuItem();
        if (miNew != null) menu.add(miNew);
        JMenuItem miInsert = createInsertMenuItem();
        if (miInsert != null) menu.add(miInsert);
        if (miSearch != null || miNew != null) menu.addSeparator();
        JMenuItem miPaste = createPasteMenuItem();
        if (miPaste != null) {
            menu.add(miPaste);
            menu.addSeparator();
        }
    
        menu.add(createCollapseOthersMenuItem(tn));
        return menu;
    }
    
    public OAMenuItem createAddMenuItem() {
        if (!getModel().getAllowAdd()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAButton.ADD_MANUAL) {
            @Override
            public boolean onActionPerformed() {
                AppUserJfcBase.this.onAdd();
                return true;
            }
        };
        mi.setText("Add a "+getModel().getDisplayName());
        mi.setToolTipText("Add a "+getModel().getDisplayName());
        return mi;
    }
    
    public OAMenuItem createNewMenuItem() {
        return createNewMenuItem(getHub());
    }
    public OAMenuItem createNewMenuItem(Hub<AppUser> hub) {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(hub, OAMenuItem.NEW) {
            @Override
            public void afterActionPerformed() {
                // AppUserJfcBase.this.getEditDialog(this).setVisible(true);
                AppUserJfcBase.this.onNewAppUserCreated();
                super.afterActionPerformed();
            }
        };
        mi.setMnemonic(KeyEvent.VK_N);
        mi.setText("Create a new "+getModel().getDisplayName());
        mi.setToolTipText("Create a new "+getModel().getDisplayName());
        mi.setFocusComponent(txtFirstName);
        return mi;
    }
    
    public OAMenuItem createInsertMenuItem() {
        return createInsertMenuItem(getHub());
    }
    public OAMenuItem createInsertMenuItem(Hub<AppUser> hub) {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(hub, OAMenuItem.INSERT) {
            @Override
            public void afterActionPerformed() {
                // AppUserJfcBase.this.getEditDialog(this).setVisible(true);
                AppUserJfcBase.this.onNewAppUserCreated();
                super.afterActionPerformed();
            }
        };
        mi.setMnemonic(KeyEvent.VK_I);
        mi.setText("Insert a new "+getModel().getDisplayName());
        mi.setToolTipText("Insert a new "+getModel().getDisplayName());
        mi.setFocusComponent(txtFirstName);
        return mi;
    }
    
    public JMenuItem createCollapseOthersMenuItem(final OATreeNode tn) {
        JMenuItem mi = new JMenuItem();
        mi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                OATree t = tn.getTree();
                if (t != null) {
                    t.expandOnlySelectedTreeNode();
                }
            }
        });
        mi.setMnemonic(KeyEvent.VK_C);
        mi.setText("Collapse others");
        mi.setToolTipText("Collapse other tree nodes");
        return mi;
    }
    public OATreeNode getTreeNode() {
        if (node != null) return node;
        node = createTreeNode(null, null, true);
        if (getModel().getAllowMultiSelect()) {
            node.setSelectedHub(getModel().getMultiSelectHub());
        }
        return node;
    }
    public OATreeNode createTreeNode(String leadingPropertyPath, Hub<AppUser> hubRoot, boolean bIncludeChildren, OATreeNode ... parentNodes) {
        if (hubRoot == null && OAString.isEmpty(leadingPropertyPath)) {
            hubRoot = getModel().getHub();
        }
        OATreeNode node = new OATreeNode(OAString.cpp(leadingPropertyPath, AppUser.P_DisplayName), hubRoot, getHub()) {
            @Override
            public void objectSelected(Object obj) {
                super.objectSelected(obj);
                AppUserJfcBase.this.onShowEditPanel();
            }
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                AppUserJfcBase.this.onDoubleClickTreeNode();
            }
            @Override
            public JPopupMenu getPopupMenu() {
                JPopupMenu pm = super.getPopupMenu();
                if (pm == null) {
                    pm = createTreeNodePopupMenu(this);
                    setPopupMenu(pm);
                }
                return pm;
            }
        };
        node.setIcon(getIcon());
        node.setForegroundColorProperty(PP_ForeColor);
        node.setBackgroundColorProperty(PP_BackColor);
        node.setIconColorProperty(PP_IconColor);
        node.setImageProperty(PP_Icon);
        node.setAllowDnD(true);
        node.setAllowDrop(true);
        node.setAllowDrag(true);
        node.setFontProperty(PP_Font);
        node.setSuffix(null);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        setLastTreeNode(node);
    
        if (!bIncludeChildren) {
            return node;
        }
     
        OATreeNode[] nodes = (OATreeNode[]) OAArray.add(OATreeNode.class, parentNodes, node);
     
        return node;
    }
    protected OATreeNode findNode(String propertyPath, OATreeNode ... parentNodes) {
        if (propertyPath == null) return null;
        for (OATreeNode tn : parentNodes) {
            if (tn.getHub() != null) continue;
            String pp = tn.getPropertyPath();
            if (pp == null) continue;
            if (pp.toLowerCase().startsWith(propertyPath.toLowerCase()+".")) return tn;
        }
        return null;
    }
    
    public JPopupMenu createTreeNodePopupMenu(OATreeNode tn) {
        JPopupMenu menu = new JPopupMenu();
    
        JMenuItem miSearch = createSearchMenuItem();
        if (miSearch != null) menu.add(miSearch);
        JMenuItem miNew = createNewMenuItem();
        if (miNew != null) menu.add(miNew);
        JMenuItem miInsert = createInsertMenuItem();
        if (miInsert != null) menu.add(miInsert);
        if (miSearch != null || miNew != null) menu.addSeparator();
    
        OAMenuItem mi;
        mi = getAppUserLoginsJfc().createNewMenuItem();
        if (mi != null) menu.add(mi);
        mi = getAppUserLoginsJfc().createAddMenuItem();
        if (mi != null) menu.add(mi);
    
        menu.addSeparator();
        JMenuItem miRemove = createRemoveMenuItem();
        if (miRemove != null) menu.add(miRemove);
        JMenuItem miDelete = createDeleteMenuItem();
        if (miDelete != null) menu.add(miDelete);
    
        if (miRemove != null || miDelete != null) menu.addSeparator();
        JMenuItem miCut = createCutMenuItem();
    
        if (miCut != null) menu.add(miCut);
        JMenuItem miCopy = createCopyMenuItem();
        if (miCopy != null) menu.add(miCopy);
        JMenuItem miPaste = createPasteMenuItem();
        if (miPaste != null) menu.add(miPaste);
    
        if (miCut != null || miCopy != null || miPaste != null) menu.addSeparator();
    
        JMenuItem miCollapse = createCollapseOthersMenuItem(tn);
        if (miCollapse != null) menu.add(miCollapse);
    
        return menu;
    }
    public OAMenuItem createSearchMenuItem() {
        if (!getModel().getAllowSearch()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), getModel().getDisplayName() + " search ...", Resource.getJarIcon("search.gif"), OAButton.SEARCH) {
            @Override
            public Object getSearchObject() {
                AppUser appUser = AppUserJfcBase.this.onSearch();
                return appUser;
            }
            @Override
            public void afterActionPerformed() {
                super.afterActionPerformed();
                OATree tree = getTreeUsed();
                if (tree != null) {
                    tree.setSelectedNode(getHub().getAO());
                }
                onShowEditPanel();
            }
        };
        mi.setMnemonic(KeyEvent.VK_S);
        return mi;
    }
    
    public JMenuItem createHubSearchMenuItem() {
        if (!getModel().getAllowHubSearch()) return null;
        JMenuItem mi = new JMenuItem(getModel().getDisplayName() + " table search ...", Resource.getJarIcon("hubsearch16.png"));
        mi.setMnemonic(KeyEvent.VK_I);
        mi.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AppUserJfcBase.this.onHubSearch();
           }
        });
        return mi;
    }
    public OAMenuItem createCutMenuItem() {
        if (!getModel().getAllowCut()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.CUT);
        mi.setText("Cut "+getModel().getDisplayName());
        if (getModel().getAllowMultiSelect()) {
            mi.setMultiSelectHub(getModel().getMultiSelectHub());
        }
        return mi;
    }
    public OAMenuItem createCopyMenuItem() {
        if (!getModel().getAllowCopy()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.COPY);
        mi.setText("Copy "+getModel().getDisplayName());
        mi.setToolTipText("Create a copy of "+getModel().getDisplayName());
        if (getModel().getAllowMultiSelect()) {
            mi.setMultiSelectHub(getModel().getMultiSelectHub());
        }
        return mi;
    }
    public OAMenuItem createPasteMenuItem() {
        if (!getModel().getAllowPaste()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.PASTE);
        mi.setText("Paste "+getModel().getDisplayName());
        mi.setToolTipText("Paste "+getModel().getDisplayName());
        mi.setConfirmMessage("Ok to paste?");
        return mi;
    }
    public OAMenuItem createSaveMenuItem() {
        if (!getModel().getAllowSave()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.SAVE);
        mi.setText("Save "+getModel().getDisplayName());
        mi.setMnemonic(KeyEvent.VK_S);
        mi.setToolTipText("Save "+getModel().getDisplayName());
        return mi;
    }
    public OAMenuItem createDeleteMenuItem() {
        if (!getModel().getAllowDelete()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.DELETE);
        mi.setText("Delete "+getModel().getDisplayName()+" ...");
        mi.setConfirmMessage("OK to Delete this "+getModel().getDisplayName()+" from system?");
        mi.setMnemonic(KeyEvent.VK_D);
        mi.setUseSwingWorker(true);
        mi.setProcessingText("Processing ...", "Please wait while deleting Client");
        // mi.setToolTipText("Delete "+getModel().getDisplayName()+" from system, must be an Admin to do this.");
        return mi;
    }
    public OAMenuItem createRemoveMenuItem() {
        if (!getModel().getAllowRemove()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.REMOVE);
        mi.setText("Remove "+getModel().getDisplayName()+" ...");
        mi.setToolTipText("remove "+getModel().getDisplayName()+" from the list");
        mi.setMnemonic(KeyEvent.VK_R);
        return mi;
    }
    
    // Label
    public OALabel createLabel() {
        OALabel lbl = new OALabel(getHub(), OAString.cpp(AppUser.P_DisplayName), 28) {
            @Override
            public void customizeRenderer(JLabel lbl, Object object, Object value, boolean isSelected, boolean hasFocus, int row, boolean wasChanged, boolean wasMouseOver) {
                AppUserJfcBase.this.customizeRenderer(lbl, AppUserJfcBase.this.getHub().getAt(row), isSelected, hasFocus, row, wasChanged, wasMouseOver);
            }
            @Override
            public String getToolTipText(Object object, int row, String defaultValue) {
                return AppUserJfcBase.this.getToolTipText(AppUserJfcBase.this.getHub().getAt(row), row, defaultValue);
            }
        };
        lbl.setMaximumColumns(50);
        lbl.setMinimumColumns(14);
        lbl.setIconColorProperty(PP_IconColor);
        lbl.setImageProperty(PP_Icon);
        lbl.setFormat(null);
        lbl.setMaxImageHeight(20);
        lbl.setMaxImageWidth(32);
        return lbl;
    }
    // used for Label, ComboBox
    protected void customizeRenderer(JLabel lbl, AppUser appUser, boolean isSelected, boolean hasFocus, int row, boolean wasChanged, boolean wasMouseOver) {
    }
    protected String getToolTipText(AppUser appUser, int row, String defaultValue) {
        return defaultValue;
    }
    
    // ComboBox
    public OAComboBox getComboBox() {
        if (cbo == null) {
            cbo = createComboBox();
        }
        return cbo;
    }
    
    public OAComboBox createComboBox() {
        OAComboBox cbo = new OAComboBox(getHub(), OAString.cpp(AppUser.P_DisplayName), 28) {
            @Override
            public void customizeRenderer(JLabel lbl, Object object, Object value, boolean isSelected, boolean hasFocus, int row, boolean wasChanged, boolean wasMouseOver) {
                AppUserJfcBase.this.customizeRenderer(lbl, AppUserJfcBase.this.getHub().getAt(row), isSelected, hasFocus, row, wasChanged, wasMouseOver);
            }
            @Override
            public String getToolTipText(Object object, int row, String defaultValue) {
                return AppUserJfcBase.this.getToolTipText(AppUserJfcBase.this.getHub().getAt(row), row, defaultValue);
            }
        };
    
        cbo.setPopupColumns(39);
        cbo.setMaximumRowCount(15);
        cbo.setMaximumColumns(50);
        cbo.setMinimumColumns(14);
        cbo.setIconColorProperty(PP_IconColor);
        cbo.setImageProperty(PP_Icon);
        cbo.setFormat(null);
        cbo.setNullDescription("<html><i style='color:gray'>select</i></html>]");
        cbo.setMaxImageHeight(20);
        cbo.setMaxImageWidth(32);
        return cbo;
    }
    
    public OATableComboBox getTableComboBox() {
        if (cboTable == null) {
            cboTable = createTableComboBox();
        }
        return cboTable;
    }
    public OATableComboBox createTableComboBox() {
        OATable table = new OATable(getHub());
        table.setAllowDnD(false);
        table.setAllowSorting(false);
        table.addCounterColumn();
        getSearchJfc().createTableColumns(table);
        table.setPreferredSize(15, 6, true);
        table.resizeColumnsToFitHeading();
        
        OATableComboBox cboTable = new OATableComboBox(table, getHub(), PP_Display) {
            @Override
            public void onClear() {
                getHub().setAO(null);
            }
        };
        cboTable.allowClearButton(true);
        cboTable.setIconColorProperty(PP_IconColor);
        cboTable.setColumns(28);
        cboTable.setMaximumColumns(50);
        return cboTable;
    }
    
    
    // List
    public OAList getList() {
        if (lst == null) {
            lst = createList();
        }
        return lst;
    }
    public OAList createList() {
        OAList lst = new OAList(getHub(), OAString.cpp(AppUser.P_DisplayName), 12, 28) {
            @Override
            public void customizeRenderer(JLabel label, JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.customizeRenderer(label, list, value, index, isSelected, cellHasFocus);
                AppUserJfcBase.this.customizeRenderer(label, AppUserJfcBase.this.getHub().getAt(index), isSelected, cellHasFocus, index, false, false);
            }
        };
        lst.setMinimumColumns(9);
        lst.setMaximumColumns(50);
        lst.setAllowDnD(true);
        lst.setAllowRemove(true);
        lst.setAllowDelete(false);
        lst.setAllowInsert(false);
        lst.setImageProperty(null);
        lst.setMaxImageHeight(20);
        lst.setMaxImageWidth(32);
        lst.setConfirmMessage("Ok to remove "+getModel().getDisplayName());
        lst.setIconColorProperty(PP_IconColor);
        lst.setBackgroundColorProperty(null);
        lst.setDoubleClickButton(null);
        // lst.setSelectionHub(getSelectClients());
        lst.setBorder(new EmptyBorder(3,3,1,1));
        
        return lst;
    }
    
    // comboBoxTree
    public OATreeComboBox createSearchTreeComboBox() {
        OATreeComboBox cbo = new OATreeComboBox(createSearchTree(), getHub(), PP_Display);
        cbo.setColumns(28);
        return cbo;
    }
    public OATree createSearchTree() {
        OATree tree = new OATree();
        tree.setPreferredSize(10, 32);
        OATreeTitleNode tnode;
        OATreeNode node, node2;
    
        tnode = new OATreeTitleNode(getModel().getPluralDisplayName());
        tnode.setIcon(AppUserJfc.getTitleIcon());
        tree.add(tnode);
        node = new OATreeNode(AppUserJfc.PP_Display, ModelDelegate.getAppUsers().createSharedHub(), getHub()) {
            @Override
            public void onDoubleClick(Object obj, MouseEvent e) {
                AppUserJfcBase.this.onDoubleClickTreeNode();
            }
        };
        if (getModel().getAllowMultiSelect()) {
            node.setSelectedHub(getModel().getMultiSelectHub());
        }
        node.setIcon(AppUserJfc.getIcon());
        node.setForegroundColorProperty(AppUserJfc.PP_ForeColor);
        node.setBackgroundColorProperty(AppUserJfc.PP_BackColor);
        node.setIconColorProperty(AppUserJfc.PP_IconColor);
        node.setImageProperty(AppUserJfc.PP_Icon);
        node.setFontProperty(AppUserJfc.PP_Font);
        node.setMaxImageHeight(20);
        node.setMaxImageWidth(32);
        if (getModel().getAllowMultiSelect()) {
            node.setSelectedHub(getModel().getMultiSelectHub());
        }
        tnode.add(node);
        return tree;
    }
    
    
    // Table
    public JPanel createTablePanel() {
        return createTablePanel(true, true);
    }
    public JPanel createTablePanel(boolean bIncludeNorthToolbar, boolean bIncludeSouthToolbar) {
        OATable table = createTable();
        // table.setSelectHub(getModel().getMultiSelectHub());
    
        OATableScrollPane tableScrollPane = createTableScrollPane(table);
        tableScrollPane.setBorder(new TitledBorder(""));
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(tableScrollPane, BorderLayout.CENTER);
        
        if (bIncludeNorthToolbar) {
            JToolBar toolBar = createToolBar(ToolBarOptions.createTableFindToolBar());
            if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.NORTH);
        }
        if (bIncludeSouthToolbar) {
            JToolBar toolBar = createToolBar(ToolBarOptions.createSouthTableToolBar());
            if (toolBar != null) {
                pan.add(new OAScroller(toolBar), BorderLayout.SOUTH);
            }
        }
        return pan;
    }
    public JPanel createReadOnlyTablePanel() {
        OATable table = createReadOnlyTable();
        // table.setSelectHub(getModel().getMultiSelectHub());
    
        OATableScrollPane tableScrollPane = createTableScrollPane(table);
        tableScrollPane.setBorder(new TitledBorder(""));
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(tableScrollPane, BorderLayout.CENTER);
        
        JToolBar toolBar = createToolBar(ToolBarOptions.createSouthTableToolBar());
        if (toolBar != null) pan.add(new OAScroller(toolBar), BorderLayout.SOUTH);
        
        return pan;
    }
    public JPanel createCombinedPanel() {
        return createCombinedPanel(false); 
    }
    protected boolean bHasCombinedPanel;
    public JPanel createCombinedPanel(final boolean bUseList) {
        bHasCombinedPanel = true;
        JTabbedPane tp;
        Dimension d = new Dimension(5,5);
        if (this.tabbedPane == null) tp = getTabbedPane();
        else tp = createTabbedPane();
        tp.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
        if (this.tabbedPane == null) tp = getTabbedPane();
        final JComponent comp = createEditPanel(tp, false);
        comp.setMinimumSize(d);
        JSplitPane splitPane = new OASplitPane(bUseList ? JSplitPane.HORIZONTAL_SPLIT : JSplitPane.VERTICAL_SPLIT,
                bUseList ? new JScrollPane(createList()) : createTableScrollPane(createTable()), 
                comp
        ) {
            @Override
            public void addNotify() {
                super.addNotify();
                Dimension d = getSize();
                Dimension d2 = comp.getPreferredSize();
                if (!bUseList && d2.height > d.height) {
                    setResizeWeight(.25);
                }
                if (!bUseList && getLevel() > 1) setDividerLocation(9999);
            }
        };
        
        splitPane.setOneTouchExpandable(true);
        splitPane.setDividerSize(12);
        splitPane.setResizeWeight(bUseList ? .0 : .95);
        
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(splitPane, BorderLayout.CENTER);
        
        pan.add(new OAScroller(createToolBar(ToolBarOptions.createTableToolBar())), BorderLayout.NORTH);
        return pan;
    }
    
    public JPanel createSplitPanel(int splitType, ToolBarOptions tbOptions, JComponent compTop, JComponent compBottom) {
        compBottom.setMinimumSize(new Dimension(5,5));
        JSplitPane splitPane = new OASplitPane(splitType, compTop, compBottom) {
            @Override
            public void addNotify() {
                super.addNotify();
                Dimension d = getSize();
                Dimension d2 = compBottom.getPreferredSize();
                if (splitType == JSplitPane.VERTICAL_SPLIT && d2.height > d.height) {
                    setResizeWeight(.25);
                }
                if (splitType == JSplitPane.VERTICAL_SPLIT && getLevel() > 1) setDividerLocation(9999);
            }
        };
        splitPane.setOneTouchExpandable(true);
        splitPane.setDividerSize(12);
        JPanel pan = new JPanel(new BorderLayout());
        pan.add(splitPane, BorderLayout.CENTER);
        if (tbOptions != null) pan.add(new OAScroller(createToolBar(tbOptions)), BorderLayout.NORTH);
        return pan;
    }
    
    public JPopupMenu createTablePopupMenu() {
        JPopupMenu pmenu = new JPopupMenu();
        OAMenuItem mi = createGotoEditMenuItem();
        if (mi != null) pmenu.add(mi);
    
        mi = createTableNewMenuItem();
        if (mi != null) {
            mi.setFocusComponent(tableTxtFirstName);
            pmenu.add(mi);
        }
        mi = createInsertMenuItem();
        if (mi != null) {
            mi.setFocusComponent(tableTxtFirstName);
            pmenu.add(mi);
        }
    
        mi = createSaveMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createRemoveMenuItem();
        if (mi != null) {
            pmenu.add(mi);
            pmenu.addSeparator();
        }
        mi = createDeleteMenuItem();
        if (mi != null) {
            pmenu.add(mi);
            pmenu.addSeparator();
        }
        mi = createCutMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createCopyMenuItem();
        if (mi != null) pmenu.add(mi);
        mi = createPasteMenuItem();
        if (mi != null) pmenu.add(mi);
        return pmenu;
    }
    
    public OAMenuItem createGotoEditMenuItem() {
        if (!getModel().getAllowGotoEdit()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), "Details ...", Resource.getJarIcon(Resource.IMG_Goto)) {
            @Override
            public boolean onActionPerformed() {
                AppUserJfcBase.this.getEditDialog(this).setVisible(true);
                return true;
            }
        };
        mi.setMnemonic(KeyEvent.VK_G);
        return mi;
    }
    
    public OAMenuItem createTableNewMenuItem() {
        if (!getModel().getAllowNew()) return null;
        OAMenuItem mi = new OAMenuItem(getHub(), OAMenuItem.NEW);
        mi.setMnemonic(KeyEvent.VK_N);
        mi.setText("Create a new "+getModel().getDisplayName());
        mi.setFocusComponent(tableTxtFirstName);
        return mi;
    }
    
    public OATableScrollPane createTableScrollPane(OATable table) {
        OATableScrollPane spTable = new OATableScrollPane(table, 1); // set number of fixed columns
        return spTable;
    }
    protected String getToolTipText(OATable table, int row, int col, String defaultValue) {
        // AppUser client = (AppUser) table.getHub().getAt(row);
        // defaultValue = AppUserDelegate.getToolTipText(client, true);
        return defaultValue;
    }
    public OATable createTable() {
        Hub<AppUser> hubTable;
        if (getModel().getAllowTableFilter()) hubTable = new Hub<AppUser>(AppUser.class);
        else hubTable = getModel().getHub();
     
        OATable table = new OATable(hubTable) {
            @Override
            public void customizeRenderer(JLabel lbl, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                defaultValue = super.getToolTipText(row, col, defaultValue);
                return defaultValue;
            }
            @Override
            public void onDoubleClick() {
                if (AppUserJfcBase.this.getModel().getAllowGotoEdit()) {
                    AppUserJfcBase.this.getEditDialog(this).setVisible(true);
                }
            }
        };
     
        // table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        if (hubTable != getModel().getHub()) {
            table.setMasterFilterHub(getModel().getHub());
        }
        table.setAllowDnD(false);
        table.setAllowSorting(getModel().getAllowTableSorting());
        // table.setColumnProperties(ModelDelegate.getProperties(), "AppUser");
    
        table.addCounterColumn();
        if (getModel().getAllowMultiSelect()) {
            table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 5);
        }
        createTableColumns(table);
        
        table.setPreferredSize(3, 2, true);
        table.setShowChanges(true);
        table.resizeColumnsToFitHeading();
        table.setComponentPopupMenu(createTablePopupMenu());
        return table;
    }
    
    public void createTableColumns(OATable table) {
        OALabel lbl;
        OATableColumn tc;
        tableTxtFirstName = createFirstNameTextField();
        tc = table.addColumn("First Name", 12, tableTxtFirstName);
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(AppUser.P_FirstName));
        }
        tc = table.addColumn("Last Name", 12, createLastNameTextField());
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(AppUser.P_LastName));
        }
        tc = table.addColumn("Login Id", 12, createLoginIdTextField());
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(AppUser.P_LoginId));
        }
        tc = table.addColumn("Admin", 5, createAdminCheckBox());
        tc = table.addColumn("Inactive Date", 8, createInactiveDateDateComboBox());
    }
    
    public OATable createReadOnlyTable() {
        Hub<AppUser> hubTable;
        if (getModel().getAllowTableFilter()) hubTable = new Hub<AppUser>(AppUser.class);
        else hubTable = getModel().getHub();
        OATable table = new OATable(hubTable) {
            @Override
            public void customizeRenderer(JLabel lbl, JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column, boolean wasChanged, boolean wasMouseOver) {
            }
            @Override
            public String getToolTipText(int row, int col, String defaultValue) {
                defaultValue = super.getToolTipText(row, col, defaultValue);
                return defaultValue;
            }
            @Override
            public void onDoubleClick() {
                if (AppUserJfcBase.this.getModel().getAllowGotoEdit()) {
                    AppUserJfcBase.this.getEditDialog(this).setVisible(true);
                }
            }
        };
     
        // table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        table.setAllowDnD(false);
        table.setAllowSorting(getModel().getAllowTableSorting());
        if (getModel().getAllowTableFilter()) {
            table.setMasterFilterHub(getModel().getHub());
        }
        // table.setColumnProperties(ModelDelegate.getProperties(), "AppUser");
    
        table.addCounterColumn();
        if (getModel().getAllowMultiSelect()) {
            table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 6);
        }
        createReadOnlyTableColumns(table);
        
        table.resizeColumnsToFitHeading();
        table.setPreferredSize(3, 2, true);
        table.setComponentPopupMenu(createTablePopupMenu());
        return table;
    }
    
    protected void createReadOnlyTableColumns(OATable table) {
        OALabel lbl;
        OATableColumn tc;
        lbl = new OALabel(getHub(), AppUser.P_FirstName, 12);
        tc = table.addColumn("First Name", 12, lbl);
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(AppUser.P_FirstName));
        }
        lbl = new OALabel(getHub(), AppUser.P_LastName, 12);
        tc = table.addColumn("Last Name", 12, lbl);
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(AppUser.P_LastName));
        }
        lbl = new OALabel(getHub(), AppUser.P_LoginId, 12);
        tc = table.addColumn("Login Id", 12, lbl);
        if (getModel().getAllowTableFilter()) {
            tc.setFilterComponent(new OATextFieldFilter(AppUser.P_LoginId));
        }
        lbl = new OALabel(getHub(), AppUser.P_Admin, 5);
        tc = table.addColumn("Admin", 5, lbl);
        lbl = new OALabel(getHub(), AppUser.P_InactiveDate, 8);
        tc = table.addColumn("Inactive Date", 8, lbl);
    }
    
    public OAButton createGotoEditButton() {
        if (!getModel().getAllowGotoEdit()) return null;
        OAButton cmd = new OAButton(getHub(), "Details ...", Resource.getJarIcon(Resource.IMG_Goto), OAButton.GOTO) {
            @Override
            public void afterActionPerformed() {
                AppUserJfcBase.this.getEditDialog(this).setVisible(true);
                super.afterActionPerformed();
            }
        };
        cmd.setToolTipText("go to the selected "+getModel().getDisplayName());
        OAButton.setup(cmd);
        return cmd;
    }
    
    public OAButton createAddButton() {
        if (!getModel().getAllowAdd()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.ADD_MANUAL) {
            @Override
            public boolean onActionPerformed() {
                AppUserJfcBase.this.onAdd();
                return true;
            }
        };
        cmd.getController().setViewOnly(getModel().getViewOnly());
        cmd.setText("Add ...");
        OAButton.setup(cmd);
        return cmd;
    }
    public OAButton createNewButton() {
        if (!getModel().getAllowNew()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.NEW) {
            public void afterActionPerformed() {
                AppUserJfcBase.this.onNewAppUserCreated();
                super.afterActionPerformed();
            }
        };
        cmd.getController().setViewOnly(getModel().getViewOnly());
        cmd.setText("New");
        cmd.setup();
        cmd.setToolTipText("Create new "+getModel().getDisplayName());
        return cmd;
    }
    public OAButton createInsertButton() {
        if (!getModel().getAllowNew() || !getModel().getAllowMove()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.INSERT) {
            public void afterActionPerformed() {
                AppUserJfcBase.this.onNewAppUserCreated();
                super.afterActionPerformed();
            }
        };
        cmd.getController().setViewOnly(getModel().getViewOnly());
        cmd.setText("Insert");
        cmd.setup();
        cmd.setToolTipText("Insert a new "+getModel().getDisplayName());
        return cmd;
    }
    public OAButton createSaveButton() {
        if (!getModel().getAllowSave()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.SAVE);
        cmd.getController().setViewOnly(getModel().getViewOnly());
        cmd.setText("Save");
        if (getModel().getAllowMultiSelect()) cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setup();
        cmd.setToolTipText("Save "+getModel().getDisplayName());
        return cmd;
    }
    
    public OAButton createRemoveButton() {
        if (!getModel().getAllowRemove()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.REMOVE);
        cmd.getController().setViewOnly(getModel().getViewOnly());
        if (getModel().getAllowMultiSelect()) cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setText("Remove");
        cmd.setup();
        cmd.setToolTipText("Remove "+getModel().getDisplayName()+" from this list");
        return cmd;
    }
    public OAButton createDeleteButton() {
        if (!getModel().getAllowDelete()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.DELETE);
        cmd.getController().setViewOnly(getModel().getViewOnly());
        if (getModel().getAllowMultiSelect()) cmd.setMultiSelectHub(getModel().getMultiSelectHub());
        cmd.setConfirmMessage("OK to Delete this "+getModel().getDisplayName()+" from system?");
        cmd.setText("Delete ...");
        cmd.setup();
        cmd.setUseSwingWorker(true);
        cmd.setProcessingText("Processing ...", "Please wait while deleting "+getModel().getDisplayName());
        cmd.setToolTipText("Delete "+getModel().getDisplayName());
        return cmd;
    }
    
    public OAButton createMoveUpButton() {
        if (!getModel().getAllowMove()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.UP);
        cmd.getController().setViewOnly(getModel().getViewOnly());
        cmd.setup();
        cmd.setToolTipText("Move current "+getModel().getDisplayName()+" up in the list");
        return cmd;
    }
    public OAButton createMoveDownButton() {
        if (!getModel().getAllowMove()) return null;
        OAButton cmd = new OAButton(getHub(), OAButton.DOWN);
        cmd.getController().setViewOnly(getModel().getViewOnly());
        cmd.setup();
        cmd.setToolTipText("Move current "+getModel().getDisplayName()+" down in the list");
        return cmd;
    }
    
    public JToolBar createToolBar(final ToolBarOptions tbo) {
        JToolBar toolBar = new JToolBar();
        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.add(Box.createHorizontalStrut(10));
        updateToolBar(toolBar, tbo);
        toolBar.add(Box.createHorizontalGlue());
        return toolBar;
    }
    // main createToolBar
    public void updateToolBar(final JToolBar toolBar, final ToolBarOptions tbo) {
        JButton jcmd;
        OAButton cmd;
        
        if (tbo.bGoBack) {
            jcmd = createGotoListButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(7));
            }
        }
        if (tbo.bIcon) {
            Icon icon = getTitleIcon();
            JLabel lbl = new JLabel(getModel().getPluralDisplayName(), icon, JLabel.LEFT);
            lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (tbo.bLabel) {
            OALabel lbl = new OALabel(getHub(), OAString.cpp(AppUser.P_DisplayName));
            lbl.setToolTipTextPropertyPath(OAString.cpp(AppUser.P_DisplayName));
            lbl.setMaxCols(20);
            lbl.setFont(lbl.getFont().deriveFont(Font.ITALIC));
            lbl.setBorder(new CustomLineBorder(0,0,0,1,Color.gray));
            toolBar.add(lbl);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (tbo.bGoto) {
            cmd = createGotoEditButton();
            if (cmd != null) {
                toolBar.add(cmd);
                if (!tbo.bCommands) toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (tbo.bCommands) {
            cmd = createMoveUpButton();
            if (cmd != null) toolBar.add(cmd);
            cmd = createMoveDownButton();
            if (cmd != null) toolBar.add(cmd);
            cmd = createSaveButton();
            if (cmd != null) toolBar.add(cmd);
            
            cmd = createAddButton();
            if (cmd != null) toolBar.add(cmd);
            
            cmd = createNewButton();
            if (cmd != null) {
                cmd.setFocusComponent(tableTxtFirstName);
                toolBar.add(cmd);
            }
            cmd = createInsertButton();
            if (cmd != null) {
                cmd.setFocusComponent(tableTxtFirstName);
                toolBar.add(cmd);
            }
            cmd = createRemoveButton();
            if (cmd != null) toolBar.add(cmd);
            cmd = createDeleteButton();
            if (cmd != null) toolBar.add(cmd);
            toolBar.add(Box.createHorizontalStrut(10));
        }
        if (tbo.bSearch) {
            jcmd = createSearchButton();
            if (jcmd == null) tbo.bSearch = false;
            else {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (tbo.bFind) {
            OAAutoCompleteTextField txt = createAutoCompleteTextField();
            if (txt != null) {
                toolBar.add(Box.createHorizontalStrut(6));
                JLabel lbl = new JLabel(Resource.getJarIcon("find16.png"));
                lbl.setText("Find:");
                lbl.setToolTipText("Search using Display Name");
                OAJfcControllerFactory.createOnlyHubNotEmpty(getHub(), lbl);
                toolBar.add(lbl);
                toolBar.add(Box.createHorizontalStrut(5));
                toolBar.add(new OAResizePanel(txt));
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (!tbo.bSearch && tbo.bHubSearch) {
            jcmd = createHubSearchButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
        if (tbo.bCustom) {
            addCustomCommands(toolBar);
        }
        
        if (tbo.bDownload) {
            jcmd = createDownloadButton();
            if (jcmd != null) {
                toolBar.add(jcmd);
                toolBar.add(Box.createHorizontalStrut(10));
            }
        }
    
    }
    public void addCustomCommands(JToolBar toolBar) {
        if (toolBar == null) return;
    }
    public JButton createGoBackButton() {
        return null;
    }
    public JButton createGotoListButton() {
        if (!getModel().getAllowGotoList()) return null;
        JButton cmd = new JButton();
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GoBack)));
        cmd.setText("Listing");
        cmd.setToolTipText("Go to listing");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AppUserJfcBase.this.showCardPanel(AppUserJfcBase.this.CARD_List);
            }
        });
        OAButton.setup(cmd);
        return cmd;
    }
    
    public OAButton createSearchButton() {
        if (!getModel().getAllowSearch()) return null;
        OAButton cmd = new OAButton(getHub(), getModel().getDisplayName() + " search ...", Resource.getJarIcon("search.gif"), OAButton.SEARCH) {
            @Override
            public Object getSearchObject() {
                AppUser appUser = AppUserJfcBase.this.onSearch();
                return appUser;
            }
            @Override
            public void afterActionPerformed() {
                super.afterActionPerformed();
                OATree tree = getTreeUsed();
                if (tree != null) {
                    tree.setSelectedNode(getHub().getAO());
                }
                onShowEditPanel();
            }
        };
        return cmd;
    }
    
    public JButton createHubSearchButton() {
        if (!getModel().getAllowHubSearch()) return null;
        OAButton cmd = new OAButton(getHub(), "Search ...", Resource.getJarIcon("hubsearch16.png"), OAButton.HUBSEARCH) {
            @Override
            public void afterActionPerformed() {
                AppUserJfcBase.this.onHubSearch();
                super.afterActionPerformed();
            }
        };
        cmd.setToolTipText("table search");
        return cmd;
    }
    public JButton createDownloadButton() {
        if (!getModel().getAllowDownload()) return null;
        JButton cmd = new JButton("Download ...");
        cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_Download)));
        cmd.setToolTipText("download data to csv file");
        cmd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AppUserJfcBase.this.onDownload();
            }
        });
        OAJfcController jc = OAJfcControllerFactory.createOnlyHubNotEmpty(getHub(), cmd);
        OAButton.setup(cmd);
        return cmd;
    }
    protected void onDownload() {
        DownloadDialog dd = new DownloadDialog<AppUser>(getHub());
        addDownloadProperties(dd);
        dd.download();
    }
    protected void addDownloadProperties(DownloadDialog dd) {
        dd.addProperty("Id", AppUser.P_Id);
        dd.addProperty("firstName", AppUser.P_FirstName);
        dd.addProperty("lastName", AppUser.P_LastName);
        dd.addProperty("loginId", AppUser.P_LoginId);
        dd.addProperty("admin", AppUser.P_Admin);
        dd.addProperty("inactiveDate", AppUser.P_InactiveDate);
    }
    // Card Panel
    public JPanel getCardPanel() {
        if (cardPanel != null) return cardPanel;
        cardLayout = new CardLayout(5,5) {
            JPanel panList;
            JPanel panEdit;
            @Override
            public void show(Container parent, String name) {
                if (CARD_List.equals(name)) {
                    if (panList == null) {
                        panList = createListCardPanel();
                        cardPanel.add(panList, CARD_List);
                    }
                }
                else if (CARD_Edit.equals(name)) {
                    if (panEdit == null) {
                        panEdit = createEditCardPanel();
                        cardPanel.add(panEdit, CARD_Edit);
                    }
                }
                super.show(parent, name);
            }
        };
        cardPanel = new JPanel(getCardLayout());
        
        cardPanel.add(new JLabel("loading ...", Resource.getJarIcon("wait.png"), JLabel.CENTER), CARD_Edit);
        
        getCardLayout().show(cardPanel, CARD_List);
        return cardPanel;
    }
    public JPanel createListCardPanel() {
        JPanel pan = createTablePanel();
        return pan;
    }
    public JPanel createEditCardPanel() {
        JPanel pan = new JPanel(new BorderLayout());
        JTabbedPane tp;
        if (this.tabbedPane == null) tp = getTabbedPane();
        else tp = createTabbedPane();
        pan.add(createEditPanel(tp, true), BorderLayout.CENTER);
        pan.add(new OAScroller(createToolBar(ToolBarOptions.createEditPanelToolBar())), BorderLayout.NORTH);
        // cardPanel.add(getAppUserLoginsJfc().getCardPanel(), CARD_AppUserLogins); // this will be created when needed by showCardPanel(..)
        return pan;
    }
    public CardLayout getCardLayout() {
        if (cardLayout == null) {
            cardLayout = new CardLayout(5,5);
        }
        return cardLayout;
    }
    
    // Edit Panel
    public JPanel createEditPanel() {
        return createEditPanel(null, true);
    }
    public JPanel createEditPanel(JTabbedPane tabbedPane, final boolean bUseCombinedDetail) {
        if (tabbedPane == null) {
            if (this.tabbedPane == null) tabbedPane = getTabbedPane();
            else tabbedPane = createTabbedPane();;
        }
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(2, 2, 2, 2);
        gc.anchor = gc.WEST;
        JPanel panel;
        JLabel lbl;
        OALabel olbl;
        JButton cmd;
        JComponent comp;
        OAJfcController jfcController;
        OATextField txt;
        OAPasswordField ptxt;
        OACheckBox chk;
        OADateComboBox dcbo;
        OATextArea txta;
        JPanel pan;
        JPanel panMain = new JPanel(new BorderLayout());
        panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(5,5, 3,3));
    
        lbl = new JLabel("First Name:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        txt = createFirstNameTextField();
        if (getModel().getViewOnly()) txt.getController().setViewOnly(true);
        txt.setLabel(lbl);
        txtFirstName = txt;
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(txt, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Last Name:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        txt = createLastNameTextField();
        if (getModel().getViewOnly()) txt.getController().setViewOnly(true);
        txt.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(txt, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Login Id:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        txt = createLoginIdTextField();
        if (getModel().getViewOnly()) txt.getController().setViewOnly(true);
        txt.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(txt, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Password:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        ptxt = createPasswordPasswordField();
        if (getModel().getViewOnly()) ptxt.getController().setViewOnly(true);
        ptxt.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(ptxt, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Admin:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        chk = createAdminCheckBox();
        if (getModel().getViewOnly()) chk.getController().setViewOnly(true);
        chk.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(chk, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Edit Processed:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        chk = createEditProcessedCheckBox();
        if (getModel().getViewOnly()) chk.getController().setViewOnly(true);
        chk.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(chk, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Inactive Date:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        dcbo = createInactiveDateDateComboBox();
        if (getModel().getViewOnly()) dcbo.getController().setViewOnly(true);
        dcbo.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(dcbo, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Display Name:");
        gc.anchor = gc.WEST;
        panel.add(lbl, gc);
        gc.anchor = gc.NORTHWEST;
        olbl = createDisplayNameLabel();
        if (getModel().getViewOnly()) olbl.getController().setViewOnly(true);
        olbl.setLabel(lbl);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        comp = new OAResizePanel(olbl, 95);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.gridwidth = 1;
    
        lbl = new JLabel("Note:");
        gc.anchor = gc.NORTHWEST;
        gc.gridwidth = gc.REMAINDER;
        panel.add(lbl, gc);
        txta = createNoteTextArea();
        if (getModel().getViewOnly()) txta.getController().setViewOnly(true);
        txta.setLabel(lbl);
        gc.insets = new Insets(0, 10, 0, 0);
        gc.weightx = 0.75f;
        gc.weighty = 0.75f;
        gc.fill = gc.BOTH;
        comp = new OAResizePanel(new JScrollPane(txta), 90, true);
        panel.add(comp, gc);
        gc.fill = gc.NONE;
        gc.weightx = 0.0f;
        gc.weighty = 0.0f;
        gc.insets = new Insets(0, 0, 0, 0);
        gc.gridwidth = 1;
    
        // take up remaining space
        lbl = new JLabel("");
        panel.add(lbl, gc);
        lbl = new JLabel("");
        panel.add(lbl, gc);
        lbl = new JLabel("");
        gc.gridwidth = gc.REMAINDER;
        gc.weightx = 0.25f;
        gc.weighty = 0.25f;
        gc.fill = gc.BOTH;
        panel.add(lbl, gc);
        gc.gridwidth = 1;
        gc.weightx = gc.weighty = 0.0f;
        gc.fill = gc.NONE;
    
        tabbedPane.addTab(getModel().getDisplayName(), getIcon(), new JScrollPane(panel), null);
        panMain.add(tabbedPane, BorderLayout.CENTER);
    
        Icon icon;
        icon = Resource.getJarIcon("appUserLogin.gif");
        icon = new ScaledImageIcon(icon, 32, 20);
        tabbedPane.addChangeListener(new ChangeListener() {
            volatile JPanel panThis;
            volatile Exception ex;
            @Override
            public void stateChanged(ChangeEvent e) {
                if (panThis != null) return;
                if (AppUserJfcBase.this.TAB_AppUserLogins == 0) return;
                final JTabbedPane tp = (JTabbedPane) e.getSource();
                if (tp.getSelectedIndex() != AppUserJfcBase.this.TAB_AppUserLogins) return;
                SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        try {
                            if (bUseCombinedDetail) panThis = getAppUserLoginsJfc().createCombinedPanel();
                            else panThis = getAppUserLoginsJfc().createTablePanel();
                        }
                        catch (Exception e) {
                            ex = e;
                        }
                        return null;
                    }
                    @Override
                    protected void done() {
                        if (ex != null) {
                            LOG.log(Level.WARNING, "UI exception creating UI for AppUser", ex);
                            JOptionPane.showMessageDialog(null, "Exception while creating UI, message sent to tech support", "UI Exception", JOptionPane.ERROR_MESSAGE);
                        }
                        if (panThis == null) panThis = new JPanel();
                        tp.setComponentAt(AppUserJfcBase.this.TAB_AppUserLogins, panThis);
                    }
                };
                sw.execute();
            }
        });
        if (getModel().getAppUserLoginsModel().getCreateUI()) {
            if ((this.TAB_AppUserLogins = tabbedPane.getTabCount()) == 0) {;
                JPanel panThis;
                if (bUseCombinedDetail) panThis = getAppUserLoginsJfc().createCombinedPanel();
                else panThis = getAppUserLoginsJfc().createTablePanel();
                tabbedPane.setComponentAt(AppUserJfcBase.this.TAB_AppUserLogins, panThis);
            }
            else {
                tabbedPane.addTab("Logins", icon, new JLabel("loading ...", Resource.getJarIcon("wait.png"), JLabel.CENTER), "App User Logins");
            }
        }
        panel = panMain;
        return panel;
    }
    
    public JTabbedPane getTabbedPane() {
        if (tabbedPane == null) {
            tabbedPane = createTabbedPane();
        }
        return tabbedPane;
    }
    public JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        new TabbedPaneController(getHub(), tabbedPane);
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT); // WRAP_TAB_LAYOUT
        tabbedPane.setFocusable(true);
        return tabbedPane;
    }
    
    // edit dialog
    public JDialog getEditDialog(Component comp) {
        JDialog dlgEdit;
        if (wrEditDialog != null) {
            dlgEdit = wrEditDialog.get();
            if (dlgEdit != null) return dlgEdit;
        }
        if (jfcAppUserLogins != null) {
            // need to create a new Jfc for dialog
            AppUserJfc jfc = new AppUserJfc(getModel());
            dlgEdit = jfc.getEditDialog(comp);
            wrEditDialog = new WeakReference(dlgEdit);
            return dlgEdit;
        }
        Window win = JfcDelegate.getWindow(comp);
        final Hub<AppUser> hub = new Hub<AppUser>(AppUser.class);
        hub.setSharedHub(AppUserJfcBase.this.getModel().getHub(), true);
        dlgEdit = new JDialog(win, getModel().getDisplayName(), ModalityType.MODELESS) {
            @Override
            public void setVisible(boolean b) {
                super.setVisible(b);
                if (b) hub.setSharedHub(AppUserJfcBase.this.getModel().getHub(), true);
                else hub.setSharedHub(null);
            }
        };
        wrEditDialog = new WeakReference(dlgEdit);
        dlgEdit.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
        dlgEdit.setLayout(new BorderLayout());
        JToolBar tb = createToolBar(ToolBarOptions.createDialogToolBar());
        if (tb != null) {
            dlgEdit.add(new OAScroller(tb), BorderLayout.NORTH);
        }
        AppUserJfc jfc = new AppUserJfc(getModel());
        JPanel panEdit = jfc.createEditPanel();
        dlgEdit.add(panEdit, BorderLayout.CENTER);
        
        panEdit.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false), "esc");
        panEdit.getActionMap().put("esc", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                getEditDialog(null).setVisible(false);
            }
        });
        
        OAJfcUtil.pack(dlgEdit);
        Dimension dimMax;
        dimMax = Toolkit.getDefaultToolkit().getScreenSize();
        dimMax.width *= .80;
        dimMax.height *= .80;
        Dimension dim = dlgEdit.getSize();
        dim.width *= 1.25;
        dim.height *= 1.25;
        dim.width = (int) Math.min(dim.width, dimMax.width);
        dim.height = (int) Math.min(dim.height, dimMax.height);
        dim.width = (int) Math.max(dim.width, dimMax.width/3);
        dim.height = (int) Math.max(dim.height, dimMax.height/3);
        dlgEdit.setSize(dim);
        
        if (win != null) dlgEdit.setLocationRelativeTo(win);
        return dlgEdit;
    }
    
    // UI for Filters
    
    public OALabel createIdLabel() {
        OALabel lbl = new OALabel(getHub(), AppUser.P_Id, 5);
        lbl.setMaximumColumns(8);
        return lbl;
    }
    
    public OATextField createLoginIdTextField() {
        OATextField txt = new OATextField(getHub(), AppUser.P_LoginId, 12);
        txt.setMinimumColumns(0);
        txt.setMaximumColumns(50);
        // setup(txt);
        return txt;
    }
    
    public OAPasswordField createPasswordPasswordField() {
        OAPasswordField ptxt = new OAPasswordField(getHub(), AppUser.P_Password, 12);
        ptxt.setMaximumColumns(50);
        ptxt.setConversion('S');
        return ptxt;
    }
    
    public OACheckBox createAdminCheckBox() {
        OACheckBox chk = new OACheckBox(getHub(), AppUser.P_Admin);
        // chk.setText("Admin")
        return chk;
    }
    
    public OATextField createFirstNameTextField() {
        OATextField txt = new OATextField(getHub(), AppUser.P_FirstName, 12);
        txt.setMinimumColumns(0);
        txt.setMaximumColumns(50);
        // setup(txt);
        return txt;
    }
    
    public OATextField createLastNameTextField() {
        OATextField txt = new OATextField(getHub(), AppUser.P_LastName, 12);
        txt.setMinimumColumns(0);
        txt.setMaximumColumns(50);
        // setup(txt);
        return txt;
    }
    
    public OADateComboBox createInactiveDateDateComboBox() {
        OADateComboBox dcbo = new OADateComboBox(getHub(), AppUser.P_InactiveDate, 8);
        dcbo.setMaximumColumns(14);
        OATextField txt = new OATextField(getHub(), AppUser.P_InactiveDate, 10);
        dcbo.setEditor(txt);
        return dcbo;
    }
    
    public OACheckBox createEditProcessedCheckBox() {
        OACheckBox chk = new OACheckBox(getHub(), AppUser.P_EditProcessed);
        // chk.setText("Edit Processed")
        return chk;
    }
    
    public OATextArea createNoteTextArea() {
        OATextArea txta = new OATextArea(getHub(), AppUser.P_Note, 2, 20);
        txta.setWrapStyleWord(true);
        txta.setLineWrap(true);
        setup(txta);
        return txta;
    }
    public OALabel createNoteLabel() {
        OALabel lbl = new OALabel(getHub(), AppUser.P_Note, 15);
        return lbl;
    }
    
    public OALabel createFullNameLabel() {
        OALabel lbl = new OALabel(getHub(), AppUser.P_FullName, 23);
        lbl.setMaximumColumns(50);
        return lbl;
    }
    
    public OALabel createDisplayNameLabel() {
        OALabel lbl = new OALabel(getHub(), AppUser.P_DisplayName, 28);
        lbl.setMaximumColumns(50);
        return lbl;
    }
    
    protected void setup(JTextComponent txt) {
        OATextController tc = new OATextController(txt, Resource.getSpellChecker(), true);
        String s = txt.getToolTipText();
        if (!OAString.isEmpty(s)) s = "<html>"+s+"<br>";
        else s = "<html>";
        s += "<small><i>Right click for more options";
        txt.setToolTipText(s);
    }
    
    // Autocomplete
    public OAAutoCompleteTextField createAutoCompleteTextField() {
        return createAutoCompleteTextField(PP_Display);
    }
    public OAAutoCompleteTextField createAutoCompleteTextField(String propertyPath) {
        OAAutoCompleteTextField txt = new OAAutoCompleteTextField(getHub(), propertyPath, 28);
        txt.setMaximumColumns(50);
        txt.setToolTipText("Search using Display Name");
        return txt;
    }
    
    
    public AppUserLoginJfc getAppUserLoginsJfc() {
        if (jfcAppUserLogins == null) {
            jfcAppUserLogins = createAppUserLoginsJfc();
        }
        return jfcAppUserLogins;
    }
    public AppUserLoginJfc createAppUserLoginsJfc() {
        jfcAppUserLogins = new AppUserLoginJfc(getModel().getAppUserLoginsModel()) {
            @Override
            public JPanel getCardPanel() {
                if (cardPanel != null) return cardPanel;
                cardPanel = new JPanel(getCardLayout());
                JPanel pan = new JPanel(new BorderLayout());
                pan.add(createToolBar(ToolBarOptions.createEditPanelToolBar()), BorderLayout.NORTH);
                pan.add(createEditPanel(), BorderLayout.CENTER);
                cardPanel.add(pan, CARD_Edit);
                return cardPanel;
            }
    
            @Override
            public void showCardPanel(String name) {
                if (name.equals(AppUserLoginJfc.CARD_List)) {
                    AppUserJfcBase.this.showCardPanel(CARD_Edit);
                    if (AppUserJfcBase.this.TAB_AppUserLogins >= 0) {
                        AppUserJfcBase.this.getTabbedPane().setSelectedIndex(AppUserJfcBase.this.TAB_AppUserLogins);
                    }
                }
                else if (name.equals(AppUserLoginJfcBase.CARD_Edit)) {
                    AppUserJfcBase.this.showCardPanel(CARD_Edit);
                    if (AppUserJfcBase.this.TAB_AppUserLogins >= 0) {
                        AppUserJfcBase.this.getTabbedPane().setSelectedIndex(AppUserJfcBase.this.TAB_AppUserLogins);
                    }
                }
                else {
                    AppUserJfcBase.this.showCardPanel(CARD_AppUserLogins);
                    super.showCardPanel(name);
                }
            }
            public JButton createGoBackButton() {
                JButton cmd = new JButton();
                cmd.setIcon(Resource.getJarIcon(Resource.getValue(Resource.IMG_GoBack)));
                cmd.setToolTipText("Go to " + AppUserJfcBase.this.getModel().getDisplayName());
                cmd.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        AppUserJfcBase.this.showCardPanel(AppUserJfcBase.this.CARD_Edit);
                        AppUserJfcBase.this.getHub().resetAO(); // this will set selected treeNode
                    }
                });
                OAButton.setup(cmd);
                return cmd;
            }
            @Override
            protected void onNewAppUserLoginCreated() {
                if (!bHasCombinedPanel) getEditDialog(AppUserJfcBase.this.getCardPanel()).setVisible(true);
            }
        };
        jfcAppUserLogins.setLevel(getLevel()+1);
        OAModelJfcUtil.setParent(jfcAppUserLogins, this);
        return jfcAppUserLogins;
    }
    // OnShowCommands
    public void showCardPanel(String name) {
        if (name == null) return;
        if (cardPanel == null) return;
        if (name.equalsIgnoreCase(CARD_AppUserLogins)) {
            if ( !OAArray.contains(cardPanel.getComponents(), getAppUserLoginsJfc().getCardPanel()) ) {
                cardPanel.add(getAppUserLoginsJfc().getCardPanel(), CARD_AppUserLogins);
            }
        }
        getCardLayout().show(getCardPanel(), name);
    }
    protected void onShowListPanel() {
        showCardPanel(CARD_List);
    }
    protected void onShowEditPanel() {
        showCardPanel(CARD_Edit);
    }
    protected void onNewAppUserCreated() {
        onShowEditPanel();
        if (getTabbedPane().getTabCount() > 0) {
            getTabbedPane().setSelectedIndex(0);
        }
    }
    protected void onDoubleClickTreeNode() {
        if (getModel().getAllowGotoEdit()) {
            getEditDialog(null).setVisible(true);
        }
    }
    
    // Inner Search
    public AppUserSearchJfc getSearchHubJfc() {
        if (jfcSearchHub != null) return jfcSearchHub;
        AppUserSearchModel modelSearch = new AppUserSearchModel();
        modelSearch.setSearchFromHub(getHub());
        jfcSearchHub = new AppUserSearchJfc(modelSearch, true, getModel().getAllowMultiSelect()) {
            @Override
            public JPanel createSearchFromPanel() {
                return null;
            }
            @Override
            public JPanel createSearchTreePanel() {
                return null;
            }
        };
        return jfcSearchHub;
    }
    protected void onHubSearch() {
        getSearchHubJfc().getDialog().setVisible(true);
        if (!getSearchHubJfc().wasSelected()) return;
        if (getModel().getAllowMultiSelect()) {
            getModel().getMultiSelectHub().clear();
            for (AppUser appUser : getSearchHubJfc().getModel().getMultiSelectHub()) {
                if (getHub().contains(appUser)) {
                    getModel().getMultiSelectHub().add(appUser);
                }
            }
            getHub().setAO(getModel().getMultiSelectHub().getAt(0));
        }
        else {
            AppUser appUser = getSearchHubJfc().getSelected();
            if (appUser != null) {
                if (getHub().contains(appUser)) {
                    getHub().setAO(appUser);
                }
            }
        }
    }
    // Search
    protected AppUserSearchJfc getSearchJfc() {
        if (jfcSearch == null) {
            jfcSearch = new AppUserSearchJfc();
        }
        return jfcSearch;
    }
    protected AppUser onSearch() {
        getSearchJfc().getModel().beforeInput();
        getSearchJfc().getDialog().setVisible(true);
        AppUser appUser = null;
        if (getSearchJfc().wasSelected()) appUser = getSearchJfc().getSelected();
        return appUser;
    }
    // Add
    protected AppUserSearchJfc getAddJfc() {
        if (jfcAdd == null) {
            jfcAdd = new AppUserSearchJfc();
        }
        return jfcAdd;
    }
    protected void onAdd() {
        getAddJfc().getDialog().setVisible(true);
        if (!getAddJfc().wasSelected()) return;
        AppUser appUser = getAddJfc().getSelected();
        if (appUser == null) return;
        getHub().add(appUser);
        getHub().setAO(appUser);
    }
    
    
    public static void main(String[] args) {
        AppUser user = new AppUser();
        user.setAdmin(true);
        user.setEditProcessed(true);
        AppUserLogin userLogin = new AppUserLogin();
        userLogin.setAppUser(user);
        ModelDelegate.setLocalAppUserLogin(userLogin);
        TestDelegate td = new TestDelegate();
        td.createSampleData(null);
        
        com.viaoa.context.OAContext.setContextHub(null, ModelDelegate.getLocalAppUserHub());
        AppUserJfc ui = new AppUserJfc(ModelDelegate.getAppUsers().createSharedHub()) {
            @Override
            protected AppUserSearchJfc getSearchJfc() {
                if (this.jfcSearch == null) {
                    this.jfcSearch = new AppUserSearchJfc(false) {
                        @Override
                        protected void onSearch(JComponent comp) {
                            super.onSearch(comp);
                            afterSearchCustom();
                        }
                    };
                }
                return this.jfcSearch;
            }
            private void afterSearchCustom() {
                getModel().getOriginalHub().setSharedHub(getSearchJfc().getModel().getHub());
            }
        };
        ui.getModel().setAllowNew(true);
        ui.getModel().setAllowDelete(true);
        
        JFrame frm = new JFrame();
        JfcDelegate.setMainWindow(frm);
        frm.setTitle(ui.getModel().getDisplayName());
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu(ui.getModel().getPluralDisplayName());
        menu.add(ui.createNewMenuItem());
        menu.add(ui.createSaveMenuItem());
        menu.addSeparator();
        menu.add(ui.createDeleteMenuItem());
        menuBar.add(menu);
        
        frm.setJMenuBar(menuBar);
        
        OATree tree = new OATree(15, 17);
        tree.setAllowDnD(true);
        
        OATreeNode tn = ui.getTreeTitleNode();
        tree.add(tn);
        tn.add(ui.getTreeNode());
        
        String cmd = "esc";
        tree.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0 ,false), cmd);
        tree.getActionMap().put(cmd, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        
        frm.setLayout(new BorderLayout());
        
        // ui.getTablePanel().add(new OAScroller(ui.createToolBar(true)), BorderLayout.NORTH);
        // frm.add(ui.getTablePanel(), BorderLayout.SOUTH);
        
        JPanel pan = new JPanel(new BorderLayout());
        // pan.add(ui.createTitlePanel(), BorderLayout.NORTH);
        pan.add(ui.getCardPanel());
        
        JToolBar toolBar = ui.createToolBar(ToolBarOptions.createNorthTableSearchToolBar());
        if (toolBar != null) frm.add(new OAScroller(toolBar), BorderLayout.NORTH);
        
        toolBar = new JToolBar();
        toolBar.add(Box.createHorizontalStrut(25));
        AppUserJfc jfcAU = new AppUserJfc(ModelDelegate.getLocalAppUserHub());
        OACheckBox chk = jfcAU.createEditProcessedCheckBox();
        chk.setText("Edit Processed");
        toolBar.add(chk);
        chk = jfcAU.createAdminCheckBox();
        chk.setText("Is Admin");
        toolBar.add(chk);
        JPanel panx = new JPanel(new BorderLayout());
        panx.add(toolBar, BorderLayout.NORTH);
        
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.add("Main", pan);
        
        pan = new JPanel(new GridBagLayout());
        pan.setBorder(new EmptyBorder(20,20,10,10));
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(2, 2, 2, 2);
        gc.anchor = gc.WEST;
        pan.add(new JLabel("Label: "), gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        pan.add(new OAResizePanel(ui.createLabel(), 75), gc);
        gc.gridwidth = 1;
        gc.fill = gc.NONE;
        pan.add(new JLabel("Combo: "), gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.HORIZONTAL;
        pan.add(new OAResizePanel(ui.createComboBox(), 75), gc);
        gc.fill = gc.NONE;
        pan.add(new JLabel("List: "), gc);
        gc.gridwidth = gc.REMAINDER;
        gc.fill = gc.BOTH;
        gc.weightx = gc.weighty = 1.0;
        pan.add(new OAResizePanel(new JScrollPane(ui.createList()), 75, true), gc);
        pan.add(new JLabel(), gc);
        panx.add(new JScrollPane(pan), BorderLayout.CENTER);
        tabbedPane.add("Sample", panx);
        JSplitPane sp = new OASplitPane(JSplitPane.HORIZONTAL_SPLIT, new JScrollPane(tree), tabbedPane);
        sp.setOneTouchExpandable(true);
        sp.setDividerSize(6);
    
        /*
        sp = new OASplitPane(JSplitPane.HORIZONTAL_SPLIT, sp, new JScrollPane(ui.createList()));
        sp.setOneTouchExpandable(true);
        sp.setDividerSize(6);
        sp.setResizeWeight(.90);
        */
        frm.add(sp, BorderLayout.CENTER);
        
        OAJfcUtil.pack(frm);;
        Dimension d = frm.getSize();
        Dimension dimScreen = Toolkit.getDefaultToolkit().getScreenSize();
        d.width = Math.min(d.width, dimScreen.width - 80);
        d.height = Math.min(d.height, dimScreen.height - 80);
        frm.setSize(d);
        
        frm.setLocation(new Point(40, 40));
        frm.setVisible(true);
    }
}

