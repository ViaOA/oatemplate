// Generated by OABuilder
package com.template.view.oa;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dialog.ModalityType;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.URL;
import java.util.logging.Logger;

import javax.swing.AbstractAction;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;
import javax.swing.text.JTextComponent;

import com.template.delegate.JfcDelegate;
import com.template.delegate.ModelDelegate;
import com.template.model.AppServerModel;
import com.template.model.oa.AppServer;
import com.template.model.oa.search.AppServerSearch;
import com.template.model.search.AppServerSearchModel;
import com.template.resource.Resource;
import com.viaoa.hub.Hub;
import com.viaoa.image.ScaledImageIcon;
import com.viaoa.jfc.OAButton;
import com.viaoa.jfc.OAButton.ButtonCommand;
import com.viaoa.jfc.OAJfcUtil;
import com.viaoa.jfc.OASplitPane;
import com.viaoa.jfc.OATable;
import com.viaoa.jfc.OATableScrollPane;
import com.viaoa.jfc.OATextField;
import com.viaoa.jfc.OATree;
import com.viaoa.jfc.OAWaitDialog;
import com.viaoa.jfc.control.ButtonController;
import com.viaoa.jfc.text.OATextController;
import com.viaoa.object.OAObjectModel;
import com.viaoa.util.OAString;

public class AppServerSearchJfc {
	private static Logger LOG = Logger.getLogger(AppServerSearchJfc.class.getName());

	private AppServerSearchModel model;
	private JDialog dialog;
	protected AppServerJfc jfcAppServer;

	protected boolean bShowResults;
	protected boolean bMultiSelect;
	protected AppServer appServerSelected;
	protected boolean bSelected;

	public AppServerSearchJfc() {
		this(null, true, false);
	}

	public AppServerSearchJfc(AppServerSearchModel model) {
		this(model, true, false);
	}

	public AppServerSearchJfc(AppServerSearchModel model, boolean bShowResults, boolean bMultiSelect) {
		this.model = model;
		this.bShowResults = bShowResults;
		this.bMultiSelect = bMultiSelect;
	}

	public AppServerSearchJfc(boolean bShowResults) {
		this(null, bShowResults, false);
	}

	public AppServerSearchModel getModel() {
		if (model == null) {
			model = new AppServerSearchModel();
			model.getAppServerSearch().setMaxResults(100); // default for UI searches
		}
		return model;
	}

	public Hub<AppServer> getHub() {
		return getModel().getHub();
	}

	public JPanel createMainPanel() {
		JPanel panMain = new JPanel(new BorderLayout());

		JPanel panSearchFrom = createSearchFromPanel();
		JPanel panSearchTree = createSearchTreePanel();
		JPanel panSearch = createSearchPanel();

		int cnt = 0;
		if (panSearchFrom != null) {
			cnt++;
		}
		if (panSearchTree != null) {
			cnt++;
		}
		if (panSearch != null) {
			cnt++;
		}
		if (cnt == 0) {
			return panMain;
		}

		JTabbedPane tabbedPane = null;
		if (cnt > 1) {
			tabbedPane = new JTabbedPane();
			tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
			tabbedPane.setFocusable(true);

			Icon icon = Resource.getJarIcon("appServer.gif");
			if (panSearch != null) {
				icon = new ScaledImageIcon(icon, 32, 20);
				tabbedPane.addTab("Search", icon, panSearch);
			}
			if (panSearchFrom != null) {
				icon = new ScaledImageIcon(icon, 32, 20);
				tabbedPane.addTab("Selection List", icon, panSearchFrom);
			}
			if (panSearchTree != null) {
				icon = new ScaledImageIcon(icon, 32, 20);
				tabbedPane.addTab("Selection Tree", icon, panSearchTree);
			}
		}

		JPanel panMultiSelect = null;
		if (bShowResults && bMultiSelect) {
			panMultiSelect = createMultiSelectPanel();
		}

		if (tabbedPane != null) {
			panMain.add(tabbedPane, BorderLayout.CENTER);
		} else {
			if (panSearchFrom != null) {
				panMain.add(panSearchFrom, BorderLayout.CENTER);
			} else if (panSearchTree != null) {
				panMain.add(panSearchTree, BorderLayout.CENTER);
			} else if (panSearch != null) {
				panMain.add(panSearch, BorderLayout.CENTER);
			}
		}

		if (panMultiSelect != null) {
			final JComponent compx = panMain;
			final JSplitPane sp = new OASplitPane(JSplitPane.VERTICAL_SPLIT, panMain, panMultiSelect);
			sp.setDividerSize(10);
			sp.setOneTouchExpandable(true);

			panMain = new JPanel(new BorderLayout());
			panMain.add(sp, BorderLayout.CENTER);
		}

		String cmdName = "Cancel";
		panMain.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false), cmdName);
		panMain.getActionMap().put(cmdName, new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		});

		panMain.setBorder(new EmptyBorder(5, 5, 5, 5));
		return panMain;
	}

	public JPanel createSearchFromPanel() {
		final Hub<AppServer> hub = getModel().getSearchFromHub();
		if (hub == null || !bShowResults) {
			return null;
		}

		final JPanel pan = new JPanel(new BorderLayout(0, 0));
		pan.setBorder(new EmptyBorder(5, 5, 5, 5));
		OATable table = createReadOnlyTable(hub);
		OATableScrollPane spTable = new OATableScrollPane(table, 1);
		pan.add(spTable, BorderLayout.CENTER);

		if (bMultiSelect) {
			table.setMultiSelectControlKey(true);
		} else {
			JPanel panx = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
			panx.add(createSelectOneButton(hub));
			panx.add(createCancelButton());
			pan.add(panx, BorderLayout.SOUTH);

			String cmdName = "select";
			pan.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), cmdName);
			pan.getActionMap().put(cmdName, new AbstractAction() {
				public void actionPerformed(ActionEvent e) {
					AppServer appServer = hub.getAO();
					if (appServer != null) {
						onSelect(appServer, hub);
					}
				}
			});
		}
		return pan;
	}

	public JPanel createMultiSelectPanel() {
		final Hub<AppServer> hub = getModel().getMultiSelectHub();
		JPanel pan = new JPanel(new BorderLayout(0, 0));
		pan.setBorder(new EmptyBorder(5, 5, 5, 5));

		JLabel lbl = new JLabel("AppServers to add");
		lbl.setFont(lbl.getFont().deriveFont(14.0f));
		lbl.setBorder(new EmptyBorder(5, 10, 5, 5));
		pan.add(lbl, BorderLayout.NORTH);

		OATable table = createReadOnlyTable(hub);
		OATableScrollPane spTable = new OATableScrollPane(table, 1);
		pan.add(spTable, BorderLayout.CENTER);

		JPanel panx = new JPanel(new GridLayout());
		panx.add(createGotoEditButton(hub));
		panx.add(createSelectManyButton());
		panx.add(createCancelButton());
		JButton cmdRemove = createRemoveButton(hub);
		panx.add(cmdRemove);
		JButton cmdRemoveAll = createRemoveAllButton(hub);
		panx.add(cmdRemoveAll);
		JPanel panz = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
		panz.add(panx);
		pan.add(panz, BorderLayout.SOUTH);

		String cmdName = "Ok";
		pan.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), cmdName);
		pan.getActionMap().put(cmdName, new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				onSelect(getModel().getMultiSelectHub());
			}
		});

		cmdName = "Remove";
		pan.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0, true), cmdName);
		pan.getActionMap().put(cmdName, new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				hub.remove(hub.getPos());
			}
		});
		return pan;
	}

	public JPanel createSearchTreePanel() {
		// no tree properties defined in model, for AppServer
		if (true || false) {
			return null;
		}
		// if (!bShowResults) return null;
		final JPanel pan = new JPanel(new BorderLayout(0, 0));
		pan.setBorder(new EmptyBorder(5, 5, 5, 5));

		final AppServerModel model = new AppServerModel(ModelDelegate.getCreateOneAppServerHub().createSharedHub());
		if (bMultiSelect) {
			model.setAllowMultiSelect(true);
			model.getMultiSelectHub().setSharedHub(getModel().getMultiSelectHub());
		}

		if (!bMultiSelect) {
			JPanel panx = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
			panx.add(createSelectOneButton(model.getHub()));
			panx.add(createCancelButton());

			String cmdName = "select";
			pan.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), cmdName);
			pan.getActionMap().put(cmdName, new AbstractAction() {
				public void actionPerformed(ActionEvent e) {
					AppServer appServer = model.getHub().getAO();
					if (appServer != null) {
						onSelect(appServer, model.getHub());
					}
				}
			});
			pan.add(panx, BorderLayout.SOUTH);
		}

		final JLabel jlbl = new JLabel("loading ...", Resource.getJarIcon("wait.png"), JLabel.CENTER);
		pan.add(jlbl, BorderLayout.CENTER);
		SwingWorker<OATree, Void> sw = new SwingWorker<OATree, Void>() {
			@Override
			protected OATree doInBackground() throws Exception {
				AppServerJfc jfcAppServer = new AppServerJfc(model);
				OATree tree = jfcAppServer.createSearchTree();
				tree.preload();
				return tree;
			}

			@Override
			protected void done() {
				jlbl.setText(null);
				jlbl.setIcon(null);
				try {
					OATree tree = get();
					pan.add(new JScrollPane(tree), BorderLayout.CENTER);
				} catch (Exception e) {
				}
			}
		};
		sw.execute();
		return pan;
	}

	protected JPanel createSearchPanel() {
		// no search properties defined in model, for "+objectDef.getName()
		if (getModel().getSearchFromHub() != null) {
			return null;
		}
		final JPanel panTop = new JPanel(new BorderLayout(0, 0));
		panTop.add(new JScrollPane(createSearchInputPanel()), BorderLayout.CENTER);
		panTop.setBorder(new EmptyBorder(5, 5, 5, 5));

		String cmdName = "search";
		panTop.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), cmdName);
		panTop.getActionMap().put(cmdName, new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				onSearch(panTop);
			}
		});

		JPanel panx = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
		panx.add(createSearchButton());
		panx.add(createResetButton());
		panTop.add(panx, BorderLayout.SOUTH);

		if (!bShowResults) {
			return panTop;
		}
		JPanel panBottom = createSearchResultsPanel();
		JSplitPane sp = new OASplitPane(JSplitPane.VERTICAL_SPLIT, panTop, panBottom);
		sp.setDividerSize(10);
		sp.setOneTouchExpandable(true);

		JPanel pan = new JPanel(new BorderLayout());
		pan.setBorder(new EmptyBorder(5, 5, 5, 5));
		pan.add(sp);
		return pan;
	}

	protected JPanel createSearchInputPanel() {
		final JPanel panel = new JPanel(new GridBagLayout());
		GridBagConstraints gc = new GridBagConstraints();
		gc.insets = new Insets(2, 2, 2, 2);
		gc.anchor = gc.WEST;

		JPanel panx;
		JLabel lbl;
		JButton cmd;
		OATextField txt;

		lbl = new JLabel("Max Results:");
		txt = createMaxResultsTextField();
		txt.setLabel(lbl);
		panel.add(lbl, gc);
		gc.gridwidth = gc.REMAINDER;
		panel.add(txt, gc);
		gc.gridwidth = 1;

		// filler
		gc.weightx = gc.weighty = 1f;
		gc.gridwidth = gc.REMAINDER;
		panel.add(new JLabel(""), gc);

		InputMap im = panel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), "search");
		panel.getActionMap().put("search", new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				onSearch(panel);
			}
		});

		panel.setBorder(new EmptyBorder(5, 5, 5, 5));
		return panel;
	}

	protected JPanel createSearchResultsPanel() {
		JPanel panel = new JPanel(new BorderLayout(0, 0));
		panel.setBorder(new EmptyBorder(5, 5, 5, 5));

		JLabel lbl = new JLabel("Search Results");
		lbl.setFont(lbl.getFont().deriveFont(14.0f));
		lbl.setBorder(new EmptyBorder(5, 10, 5, 5));
		panel.add(lbl, BorderLayout.NORTH);

		final Hub<AppServer> hub = getHub();
		OATable table = createReadOnlyTable(hub);
		OATableScrollPane spTable = new OATableScrollPane(table, 1);
		panel.add(spTable, BorderLayout.CENTER);

		if (!bMultiSelect) {
			JPanel pan = new JPanel(new GridLayout(1, 0, 5, 0));
			pan.add(createGotoEditButton(getModel().getHub()));
			pan.add(createSelectOneButton(hub));
			pan.add(createCancelButton());
			JPanel panx = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0));
			panx.add(pan);

			String cmdName = "select";
			table.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, false), cmdName);
			table.getActionMap().put(cmdName, new AbstractAction() {
				public void actionPerformed(ActionEvent e) {
					AppServer appServer = hub.getAO();
					if (appServer != null) {
						onSelect(appServer, hub);
					}
				}
			});
			panel.add(panx, BorderLayout.SOUTH);
		}
		return panel;
	}

	public OATextField createMaxResultsTextField() {
		OATextField txt = new OATextField(getModel().getAppServerSearchHub(), AppServerSearch.P_MaxResults, 5);
		txt.setToolTipText("set the maximum rows to return");
		return txt;
	}

	protected void setup(JTextComponent txt) {
		OATextController tc = new OATextController(txt, Resource.getSpellChecker(), true);
		String s = txt.getToolTipText();
		if (!OAString.isEmpty(s)) {
			s = "<html>]" + s + "<br>";
		} else {
			s = "<html>";
		}
		s += "<small><i>Right click for more options";
		txt.setToolTipText(s);
	}

	public JButton createSearchButton() {
		URL url = OAButton.class.getResource("icons/search.gif");
		if (url == null) {
			return null;
		}
		Icon icon = new ImageIcon(url);
		final JButton cmdSearch = new JButton("Run Search", icon);
		cmdSearch.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onSearch(cmdSearch);
			}
		});
		OAButton.setup(cmdSearch);
		cmdSearch.setFocusPainted(true);
		return cmdSearch;
	}

	public JButton createResetButton() {
		URL url = OAButton.class.getResource("icons/cancel.gif");
		if (url == null) {
			return null;
		}
		Icon icon = new ImageIcon(url);
		JButton cmdReset = new JButton("Reset", icon);
		cmdReset.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onReset();
			}
		});
		OAButton.setup(cmdReset);
		cmdReset.setFocusPainted(true);
		return cmdReset;
	}

	public OATable createReadOnlyTable(final Hub<AppServer> hubAppServer) {
		Hub<AppServer> hubx = new Hub(AppServer.class);
		OATable table = new OATable(hubx) {
			@Override
			public void onDoubleClick() {
				if (AppServerSearchJfc.this.getModel().getMultiSelectHub() != hubAppServer) {
					AppServer appServer = hubAppServer.getAO();
					if (appServer != null) {
						onSelect(appServer, hubAppServer);
					}
				}
			}
		};
		table.setFilterMasterHub(hubAppServer);
		table.setAllowDnD(false);
		table.setAllowSorting(true);
		table.addCounterColumn();

		if (bMultiSelect && getModel().getMultiSelectHub() != hubAppServer) {
			table.addSelectionColumn(getModel().getMultiSelectHub(), "Select", 5);
		}
		createTableColumns(table);
		table.setPreferredSize(8, 3, true);
		return table;
	}

	protected void createTableColumns(OATable table) {
		getAppServerJfc().createReadOnlyTableColumns(table);
	}

	public OAButton createSelectOneButton(final Hub<AppServer> hub) {
		OAButton cmd = new OAButton(hub, "Select", OAButton.SELECT) {
			@Override
			public void afterActionPerformed() {
				onSelect(hub.getAO(), hub);
			}
		};
		cmd.setToolTipText("Add selected AppServer");
		OAButton.setup(cmd);
		cmd.setFocusPainted(true);
		return cmd;
	}

	public JButton createSelectManyButton() {
		URL url = OAButton.class.getResource("icons/add.gif");
		if (url == null) {
			return null;
		}
		Icon icon = new ImageIcon(url);
		JButton cmd = new JButton("Ok", icon);
		new ButtonController(getModel().getMultiSelectHub(), cmd, OAButton.HubIsNotEmpty, ButtonCommand.Other);

		cmd.setToolTipText("Add selected AppServers");
		cmd.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onSelect(getModel().getMultiSelectHub());
			}
		});
		OAButton.setup(cmd);
		cmd.setFocusPainted(true);
		return cmd;
	}

	public OAButton createRemoveButton(Hub<AppServer> hub) {
		OAButton cmd = new OAButton(hub, OAButton.REMOVE);
		cmd.setText("Remove");
		cmd.setup();
		cmd.setToolTipText("Remove selected AppServer");
		return cmd;
	}

	public OAButton createRemoveAllButton(Hub<AppServer> hub) {
		OAButton cmd = new OAButton(hub, "Remove All", OAButton.SelectHubIsNotEmpty, OAButton.REMOVE);
		cmd.setMultiSelectHub(getModel().getMultiSelectHub());
		cmd.setup();
		cmd.setToolTipText("Remove all AppServers from the select list");
		return cmd;
	}

	public JButton createCancelButton() {
		URL url = OAButton.class.getResource("icons/cancel.gif");
		if (url == null) {
			return null;
		}
		Icon icon = new ImageIcon(url);
		JButton cmd = new JButton("Cancel", icon);
		cmd.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				onCancel();
			}
		});
		OAButton.setup(cmd);
		cmd.setFocusPainted(true);
		return cmd;
	}

	public AppServerJfc getAppServerJfc() {
		if (jfcAppServer == null) {
			jfcAppServer = new AppServerJfc(new Hub<AppServer>(AppServer.class));
			OAObjectModel om = jfcAppServer.getModel();
			om.setAllowAdd(false);
			om.setAllowNew(false);
			om.setAllowRemove(false);
			om.setAllowSave(false);
			om.setAllowDelete(false);
			om.setAllowClear(false);
			om.setViewOnly(true);
		}
		return jfcAppServer;
	}

	public OAButton createGotoEditButton(final Hub<AppServer> hub) {
		OAButton cmd = new OAButton(hub, "Details ...", Resource.getJarIcon(Resource.IMG_Goto), OAButton.GOTO) {
			@Override
			public void afterActionPerformed() {
				getAppServerJfc().getHub().setSharedHub(hub, true);
				getAppServerJfc().getEditDialog(this).setVisible(true);
				super.afterActionPerformed();
			}
		};
		OAButton.setup(cmd);
		return cmd;
	}

	public JDialog getDialog() {
		if (dialog != null) {
			return dialog;
		}
		Window win = JfcDelegate.getMainWindow();
		dialog = new JDialog(win, "App Server Search", ModalityType.APPLICATION_MODAL);

		dialog.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
		dialog.setLayout(new BorderLayout());
		dialog.add(createMainPanel(), BorderLayout.CENTER);
		OAJfcUtil.pack(dialog);

		Dimension d = dialog.getSize();
		Dimension dScr = Toolkit.getDefaultToolkit().getScreenSize();
		int w = (int) Math.min((d.width * 1.25), (dScr.width * .75));
		int h = (int) Math.min((d.height * 1.25), (dScr.height * .75));
		dialog.setSize(w, h);

		Component compx = dialog.getParent();
		if (compx != null) {
			dialog.setLocationRelativeTo(compx);
		}

		dialog.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				if (!AppServerSearchJfc.this.bSelected) {
					AppServerSearchJfc.this.onCancel();
				}
			}

			@Override
			public void windowOpened(WindowEvent e) {
				AppServerSearchJfc.this.bSelected = false;
			}
		});
		return dialog;
	}

	protected void onReset() {
		getHub().cancelSelect();
		getHub().clear();
		getModel().getAppServerSearch().reset();
	}

	protected void onSelect(AppServer appServer, Hub<AppServer> hubFrom) {
		appServerSelected = appServer;
		bSelected = true;
		getHub().cancelSelect();
		getModel().onSelect(appServer, hubFrom);
		if (dialog != null) {
			dialog.setVisible(false);
		}
	}

	protected void onSelect(Hub<AppServer> hub) {
		bSelected = true;
		getHub().cancelSelect();
		getModel().onSelect(hub);
		if (dialog != null) {
			dialog.setVisible(false);
		}
	}

	protected void onCancel() {
		bSelected = false;
		appServerSelected = null;
		getHub().cancelSelect();
		if (dialog != null) {
			dialog.setVisible(false);
		}
	}

	protected void onSearch(final JComponent compFrom) {
		/*
		if (!getModel().getAppServerSearch().isDataEntered()) {
		    String msg = "Please enter selection data.";
		    JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(compFrom), msg, "AppServer Search", JOptionPane.WARNING_MESSAGE);
		    return;
		}
		*/

		Component compFocus = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
		if (compFrom != null) {
			compFrom.requestFocusInWindow();
		}
		final OAWaitDialog dlgWait = new OAWaitDialog(SwingUtilities.getWindowAncestor(compFrom));
		dlgWait.setStatus("Selecting AppServers ... please wait ...");
		dlgWait.setTitle("AppServer Search");

		SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() throws Exception {
				getModel().performSearch();
				for (int i = 0;; i += 50) {
					if (dlgWait.wasCancelled()) {
						getHub().cancelSelect();
						break;
					}
					if (getHub().getAt(i) == null) {
						break;
					}
				}
				return null;
			}

			@Override
			protected void done() {
				try {
					for (int i = 0; i < 10; i++) {
						if (dlgWait.isVisible() || dlgWait.wasCancelled()) {
							break;
						}
						Thread.sleep(5);
					}
				} catch (Exception e) {
				}
				dlgWait.setVisible(false);
			}
		};
		sw.execute();
		dlgWait.setVisible(true); // note: this is modal, code wont continue until search is done or cancelled.
		if (dlgWait.wasCancelled()) {
		} else if (getHub().getSize() == 0) {
			String msg = "No AppServers were found.";
			JOptionPane.showMessageDialog(	SwingUtilities.getWindowAncestor(compFrom),
											msg, "AppServer Search",
											JOptionPane.WARNING_MESSAGE);
			if (compFocus != null) {
				compFocus.requestFocus();
			}
		} else {
			if (!bShowResults) {
				onSelect(getHub());
				getDialog().setVisible(false);
			} else {
				if (!bMultiSelect && getHub().getSize() == 1) {
					getHub().setPos(0);
				}
				if (compFrom != null) {
					compFrom.requestFocusInWindow();
				}
			}
		}
	}

	protected void performSearch() {
		getModel().performSearch();
	}

	public boolean wasSelected() {
		return bSelected;
	}

	public AppServer getSelected() {
		return appServerSelected;
	}

	private int level;

	public int getLevel() {
		return this.level;
	}

	public void setLevel(int level) {
		this.level = level;
	}
}
