// Generated by OABuilder 
package com.template.view.client.panel.application;

import java.awt.*;
import java.awt.event.*;
import java.util.logging.*;
import javax.swing.*;
import com.template.delegate.ModelDelegate;
import com.template.model.*;
import com.template.model.oa.*;
import com.template.model.search.*;
import com.template.model.oa.propertypath.*;
import com.template.resource.Resource;
import com.template.view.oa.*;
import com.viaoa.hub.*;
import com.viaoa.jfc.*;

public class ApplicationBarBase {
    private static Logger LOG = Logger.getLogger(ApplicationBarBase.class.getName());
    
    protected JPanel cardPanel;
    protected CardLayout cardLayout;
    protected OATree tree;
    
    public static final String CARD_Splash = "splash";
    public static final String CARD_appServer = "appServer";
    public static final String CARD_AppUsers = "AppUsers";
    public static final String CARD_AppUserLogins = "AppUserLogins";
    public static final String CARD_AppUserErrors = "AppUserErrors";
    
    public ApplicationBarBase() {
        cardLayout = new CardLayout();
        cardPanel = new JPanel(cardLayout);
        setup();
    }
    
    public JPanel getPanel() {
        return cardPanel;
    }
    
    protected void setup() {
        ImageIcon icon = Resource.getJarIcon("applicationSplash.png");
        JLabel lbl = new JLabel("Application", icon, JLabel.CENTER);
        lbl.setFont(lbl.getFont().deriveFont(20.0f));
        lbl.setVerticalTextPosition(SwingConstants.TOP);
        lbl.setHorizontalTextPosition(SwingConstants.CENTER);
        cardPanel.add(lbl, CARD_Splash);
        cardLayout.show(cardPanel, CARD_Splash);
    
        getTree();
        OATreeTitleNode ttNode;
    
        // appServer - AppServer - 
        Hub<AppServer> hubAppServer = ModelDelegate.getCreateOneAppServerHub().createSharedHub();
        HubAODelegate.keepActiveObject(hubAppServer);  // createOne=true, auto set active object
        AppServerJfc jfcAppServer = new AppServerJfc(hubAppServer) {
            JPanel panx;
            @Override
            public void showCardPanel(final String name) {
                ApplicationBarBase.this.cardLayout.show(ApplicationBarBase.this.cardPanel, CARD_appServer);
                if (panx != null) {
                    super.showCardPanel(name);
                    return;
                }
                SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                    volatile Exception ex;
                    @Override
                    protected Void doInBackground() throws Exception {
                        try {
                            panx = getCardPanel();
                        }
                        catch (Exception e) {
                            ex = e;
                        }
                        return null;
                    }
                    @Override
                    protected void done() {
                        if (ex != null) {
                            LOG.log(Level.WARNING, "UI exception creating AppServerJfc", ex);
                            JOptionPane.showMessageDialog(null, "Exception while creating UI, message sent to tech support", "UI Exception", JOptionPane.ERROR_MESSAGE);
                        }
                        if (panx == null) panx = new JPanel();
                        ApplicationBarBase.this.cardPanel.add(panx, CARD_appServer);
                        showCardPanel(name);
                    }
                };
                sw.execute();
            }
            @Override
            protected void onShowListPanel() {
                super.onShowEditPanel();  // only one object, need to show editor
            }
        };
        jfcAppServer.getModel().setPluralDisplayName("AppServer");
        jfcAppServer.getModel().setAllowAdd(false);
        jfcAppServer.getModel().setAllowDownload(true);
        jfcAppServer.getModel().setAllowRemove(false);
        jfcAppServer.getModel().setAllowSearch(false);
        // createOne=true
        jfcAppServer.getModel().setAllowDelete(false);
        jfcAppServer.getModel().setAllowClear(false);
        jfcAppServer.getModel().setAllowCut(false);
        jfcAppServer.getModel().setAllowPaste(false);
        jfcAppServer.getModel().setAllowGotoList(false);
        jfcAppServer.getModel().setAllowNew(false);
        ttNode = jfcAppServer.getTreeTitleNode();
        tree.add(ttNode);
        ttNode.add(jfcAppServer.getTreeNode());
        cardPanel.add(new JLabel("loading AppServer ...", Resource.getJarIcon("wait.png"), JLabel.CENTER), CARD_appServer);
    
        // AppUsers - App Users - 
        Hub<AppUser> hubAppUser = ModelDelegate.getAppUsers().createSharedHub();
        AppUserJfc jfcAppUser = new AppUserJfc(hubAppUser) {
            JPanel panx;
            @Override
            public void showCardPanel(final String name) {
                ApplicationBarBase.this.cardLayout.show(ApplicationBarBase.this.cardPanel, CARD_AppUsers);
                if (panx != null) {
                    super.showCardPanel(name);
                    return;
                }
                SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                    volatile Exception ex;
                    @Override
                    protected Void doInBackground() throws Exception {
                        try {
                            panx = getCardPanel();
                        }
                        catch (Exception e) {
                            ex = e;
                        }
                        return null;
                    }
                    @Override
                    protected void done() {
                        if (ex != null) {
                            LOG.log(Level.WARNING, "UI exception creating AppUserJfc", ex);
                            JOptionPane.showMessageDialog(null, "Exception while creating UI, message sent to tech support", "UI Exception", JOptionPane.ERROR_MESSAGE);
                        }
                        if (panx == null) panx = new JPanel();
                        ApplicationBarBase.this.cardPanel.add(panx, CARD_AppUsers);
                        showCardPanel(name);
                    }
                };
                sw.execute();
            }
        };
        jfcAppUser.getModel().setPluralDisplayName("App Users");
        jfcAppUser.getModel().setAllowAdd(false);
        jfcAppUser.getModel().setAllowDownload(true);
        jfcAppUser.getModel().setAllowRemove(false);
        jfcAppUser.getModel().setAllowSearch(false);
        jfcAppUser.getModel().setAllowNew(true);
        ttNode = jfcAppUser.getTreeTitleNode();
        tree.add(ttNode);
        ttNode.add(jfcAppUser.getTreeNode());
        cardPanel.add(new JLabel("loading App Users ...", Resource.getJarIcon("wait.png"), JLabel.CENTER), CARD_AppUsers);
    
        // AppUserLogins - Last Day User Logins - 
        Hub<AppUserLogin> hubAppUserLogin = ModelDelegate.getAppUserLogins().createSharedHub();
        AppUserLoginJfc jfcAppUserLogin = new AppUserLoginJfc(hubAppUserLogin) {
            JPanel panx;
            @Override
            public void showCardPanel(final String name) {
                ApplicationBarBase.this.cardLayout.show(ApplicationBarBase.this.cardPanel, CARD_AppUserLogins);
                if (panx != null) {
                    super.showCardPanel(name);
                    return;
                }
                SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                    volatile Exception ex;
                    @Override
                    protected Void doInBackground() throws Exception {
                        try {
                            panx = getCardPanel();
                        }
                        catch (Exception e) {
                            ex = e;
                        }
                        return null;
                    }
                    @Override
                    protected void done() {
                        if (ex != null) {
                            LOG.log(Level.WARNING, "UI exception creating AppUserLoginJfc", ex);
                            JOptionPane.showMessageDialog(null, "Exception while creating UI, message sent to tech support", "UI Exception", JOptionPane.ERROR_MESSAGE);
                        }
                        if (panx == null) panx = new JPanel();
                        ApplicationBarBase.this.cardPanel.add(panx, CARD_AppUserLogins);
                        showCardPanel(name);
                    }
                };
                sw.execute();
            }
        };
        jfcAppUserLogin.getModel().setPluralDisplayName("Last Day User Logins");
        jfcAppUserLogin.getModel().setAllowAdd(false);
        jfcAppUserLogin.getModel().setAllowDownload(true);
        jfcAppUserLogin.getModel().setAllowRemove(false);
        jfcAppUserLogin.getModel().setAllowSearch(false);
        // AppUserLogin isProcessed=true
        // jfcAppUserLogin.getModel().setAllowDelete(false);
        jfcAppUserLogin.getModel().setAllowClear(false);
        jfcAppUserLogin.getModel().setAllowCut(false);
        jfcAppUserLogin.getModel().setAllowPaste(false);
        jfcAppUserLogin.getModel().setAllowNew(true);
        ttNode = jfcAppUserLogin.getTreeTitleNode();
        tree.add(ttNode);
        cardPanel.add(new JLabel("loading Last Day User Logins ...", Resource.getJarIcon("wait.png"), JLabel.CENTER), CARD_AppUserLogins);
    
        // AppUserErrors - User Errors - 
        Hub<AppUserError> hubAppUserError = ModelDelegate.getAppUserErrors().createSharedHub();
        AppUserErrorJfc jfcAppUserError = new AppUserErrorJfc(hubAppUserError) {
            JPanel panx;
            @Override
            public void showCardPanel(final String name) {
                ApplicationBarBase.this.cardLayout.show(ApplicationBarBase.this.cardPanel, CARD_AppUserErrors);
                if (panx != null) {
                    super.showCardPanel(name);
                    return;
                }
                SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
                    volatile Exception ex;
                    @Override
                    protected Void doInBackground() throws Exception {
                        try {
                            panx = getCardPanel();
                        }
                        catch (Exception e) {
                            ex = e;
                        }
                        return null;
                    }
                    @Override
                    protected void done() {
                        if (ex != null) {
                            LOG.log(Level.WARNING, "UI exception creating AppUserErrorJfc", ex);
                            JOptionPane.showMessageDialog(null, "Exception while creating UI, message sent to tech support", "UI Exception", JOptionPane.ERROR_MESSAGE);
                        }
                        if (panx == null) panx = new JPanel();
                        ApplicationBarBase.this.cardPanel.add(panx, CARD_AppUserErrors);
                        showCardPanel(name);
                    }
                };
                sw.execute();
            }
        };
        jfcAppUserError.getModel().setPluralDisplayName("User Errors");
        jfcAppUserError.getModel().setAllowAdd(false);
        jfcAppUserError.getModel().setAllowDownload(true);
        jfcAppUserError.getModel().setAllowRemove(false);
        jfcAppUserError.getModel().setAllowSearch(false);
        // AppUserError isProcessed=true
        // jfcAppUserError.getModel().setAllowDelete(false);
        jfcAppUserError.getModel().setAllowClear(false);
        jfcAppUserError.getModel().setAllowCut(false);
        jfcAppUserError.getModel().setAllowPaste(false);
        jfcAppUserError.getModel().setAllowNew(true);
        ttNode = jfcAppUserError.getTreeTitleNode();
        tree.add(ttNode);
        cardPanel.add(new JLabel("loading User Errors ...", Resource.getJarIcon("wait.png"), JLabel.CENTER), CARD_AppUserErrors);
    }
    protected OATree getTree() {
        if (tree != null) return tree;
        tree = new OATree(18) {
            @Override
            public void nodeSelected(OATreeNode node) {
                super.nodeSelected(node);
                if (node == null) {
                    ApplicationBarBase.this.cardLayout.show(ApplicationBarBase.this.cardPanel, ApplicationBarBase.this.CARD_Splash);
                }
            }
        };
        tree.setAllowDnD(true);
        return tree;
    }
}

